
RTC_LCD_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f40  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08005050  08005050  00006050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005118  08005118  00007070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005118  08005118  00007070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005118  08005118  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005118  08005118  00006118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800511c  0800511c  0000611c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005120  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000070  08005190  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08005190  000072d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000986e  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e40  00000000  00000000  00010907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  00012748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000833  00000000  00000000  00013210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018153  00000000  00000000  00013a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d27f  00000000  00000000  0002bb96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089cc4  00000000  00000000  00038e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2ad9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003190  00000000  00000000  000c2b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000c5cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005038 	.word	0x08005038

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005038 	.word	0x08005038

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_fmul>:
 800098c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000990:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000994:	bf1e      	ittt	ne
 8000996:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800099a:	ea92 0f0c 	teqne	r2, ip
 800099e:	ea93 0f0c 	teqne	r3, ip
 80009a2:	d06f      	beq.n	8000a84 <__aeabi_fmul+0xf8>
 80009a4:	441a      	add	r2, r3
 80009a6:	ea80 0c01 	eor.w	ip, r0, r1
 80009aa:	0240      	lsls	r0, r0, #9
 80009ac:	bf18      	it	ne
 80009ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009b2:	d01e      	beq.n	80009f2 <__aeabi_fmul+0x66>
 80009b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009c0:	fba0 3101 	umull	r3, r1, r0, r1
 80009c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80009cc:	bf3e      	ittt	cc
 80009ce:	0049      	lslcc	r1, r1, #1
 80009d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009d4:	005b      	lslcc	r3, r3, #1
 80009d6:	ea40 0001 	orr.w	r0, r0, r1
 80009da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80009de:	2afd      	cmp	r2, #253	@ 0xfd
 80009e0:	d81d      	bhi.n	8000a1e <__aeabi_fmul+0x92>
 80009e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80009e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ea:	bf08      	it	eq
 80009ec:	f020 0001 	biceq.w	r0, r0, #1
 80009f0:	4770      	bx	lr
 80009f2:	f090 0f00 	teq	r0, #0
 80009f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009fa:	bf08      	it	eq
 80009fc:	0249      	lsleq	r1, r1, #9
 80009fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a02:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a06:	3a7f      	subs	r2, #127	@ 0x7f
 8000a08:	bfc2      	ittt	gt
 8000a0a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a0e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a12:	4770      	bxgt	lr
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a18:	f04f 0300 	mov.w	r3, #0
 8000a1c:	3a01      	subs	r2, #1
 8000a1e:	dc5d      	bgt.n	8000adc <__aeabi_fmul+0x150>
 8000a20:	f112 0f19 	cmn.w	r2, #25
 8000a24:	bfdc      	itt	le
 8000a26:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a2a:	4770      	bxle	lr
 8000a2c:	f1c2 0200 	rsb	r2, r2, #0
 8000a30:	0041      	lsls	r1, r0, #1
 8000a32:	fa21 f102 	lsr.w	r1, r1, r2
 8000a36:	f1c2 0220 	rsb	r2, r2, #32
 8000a3a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a3e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a42:	f140 0000 	adc.w	r0, r0, #0
 8000a46:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a4a:	bf08      	it	eq
 8000a4c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a50:	4770      	bx	lr
 8000a52:	f092 0f00 	teq	r2, #0
 8000a56:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a5a:	bf02      	ittt	eq
 8000a5c:	0040      	lsleq	r0, r0, #1
 8000a5e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a62:	3a01      	subeq	r2, #1
 8000a64:	d0f9      	beq.n	8000a5a <__aeabi_fmul+0xce>
 8000a66:	ea40 000c 	orr.w	r0, r0, ip
 8000a6a:	f093 0f00 	teq	r3, #0
 8000a6e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a72:	bf02      	ittt	eq
 8000a74:	0049      	lsleq	r1, r1, #1
 8000a76:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a7a:	3b01      	subeq	r3, #1
 8000a7c:	d0f9      	beq.n	8000a72 <__aeabi_fmul+0xe6>
 8000a7e:	ea41 010c 	orr.w	r1, r1, ip
 8000a82:	e78f      	b.n	80009a4 <__aeabi_fmul+0x18>
 8000a84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a88:	ea92 0f0c 	teq	r2, ip
 8000a8c:	bf18      	it	ne
 8000a8e:	ea93 0f0c 	teqne	r3, ip
 8000a92:	d00a      	beq.n	8000aaa <__aeabi_fmul+0x11e>
 8000a94:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a98:	bf18      	it	ne
 8000a9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a9e:	d1d8      	bne.n	8000a52 <__aeabi_fmul+0xc6>
 8000aa0:	ea80 0001 	eor.w	r0, r0, r1
 8000aa4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000aa8:	4770      	bx	lr
 8000aaa:	f090 0f00 	teq	r0, #0
 8000aae:	bf17      	itett	ne
 8000ab0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ab4:	4608      	moveq	r0, r1
 8000ab6:	f091 0f00 	teqne	r1, #0
 8000aba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000abe:	d014      	beq.n	8000aea <__aeabi_fmul+0x15e>
 8000ac0:	ea92 0f0c 	teq	r2, ip
 8000ac4:	d101      	bne.n	8000aca <__aeabi_fmul+0x13e>
 8000ac6:	0242      	lsls	r2, r0, #9
 8000ac8:	d10f      	bne.n	8000aea <__aeabi_fmul+0x15e>
 8000aca:	ea93 0f0c 	teq	r3, ip
 8000ace:	d103      	bne.n	8000ad8 <__aeabi_fmul+0x14c>
 8000ad0:	024b      	lsls	r3, r1, #9
 8000ad2:	bf18      	it	ne
 8000ad4:	4608      	movne	r0, r1
 8000ad6:	d108      	bne.n	8000aea <__aeabi_fmul+0x15e>
 8000ad8:	ea80 0001 	eor.w	r0, r0, r1
 8000adc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_fdiv>:
 8000af4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000af8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000afc:	bf1e      	ittt	ne
 8000afe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b02:	ea92 0f0c 	teqne	r2, ip
 8000b06:	ea93 0f0c 	teqne	r3, ip
 8000b0a:	d069      	beq.n	8000be0 <__aeabi_fdiv+0xec>
 8000b0c:	eba2 0203 	sub.w	r2, r2, r3
 8000b10:	ea80 0c01 	eor.w	ip, r0, r1
 8000b14:	0249      	lsls	r1, r1, #9
 8000b16:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b1a:	d037      	beq.n	8000b8c <__aeabi_fdiv+0x98>
 8000b1c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b20:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b24:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b28:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	bf38      	it	cc
 8000b30:	005b      	lslcc	r3, r3, #1
 8000b32:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b36:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	bf24      	itt	cs
 8000b3e:	1a5b      	subcs	r3, r3, r1
 8000b40:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b44:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b48:	bf24      	itt	cs
 8000b4a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b4e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b52:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b56:	bf24      	itt	cs
 8000b58:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b60:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b64:	bf24      	itt	cs
 8000b66:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b6a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b6e:	011b      	lsls	r3, r3, #4
 8000b70:	bf18      	it	ne
 8000b72:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b76:	d1e0      	bne.n	8000b3a <__aeabi_fdiv+0x46>
 8000b78:	2afd      	cmp	r2, #253	@ 0xfd
 8000b7a:	f63f af50 	bhi.w	8000a1e <__aeabi_fmul+0x92>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b90:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b94:	327f      	adds	r2, #127	@ 0x7f
 8000b96:	bfc2      	ittt	gt
 8000b98:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b9c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ba0:	4770      	bxgt	lr
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba6:	f04f 0300 	mov.w	r3, #0
 8000baa:	3a01      	subs	r2, #1
 8000bac:	e737      	b.n	8000a1e <__aeabi_fmul+0x92>
 8000bae:	f092 0f00 	teq	r2, #0
 8000bb2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bb6:	bf02      	ittt	eq
 8000bb8:	0040      	lsleq	r0, r0, #1
 8000bba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bbe:	3a01      	subeq	r2, #1
 8000bc0:	d0f9      	beq.n	8000bb6 <__aeabi_fdiv+0xc2>
 8000bc2:	ea40 000c 	orr.w	r0, r0, ip
 8000bc6:	f093 0f00 	teq	r3, #0
 8000bca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bce:	bf02      	ittt	eq
 8000bd0:	0049      	lsleq	r1, r1, #1
 8000bd2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000bd6:	3b01      	subeq	r3, #1
 8000bd8:	d0f9      	beq.n	8000bce <__aeabi_fdiv+0xda>
 8000bda:	ea41 010c 	orr.w	r1, r1, ip
 8000bde:	e795      	b.n	8000b0c <__aeabi_fdiv+0x18>
 8000be0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000be4:	ea92 0f0c 	teq	r2, ip
 8000be8:	d108      	bne.n	8000bfc <__aeabi_fdiv+0x108>
 8000bea:	0242      	lsls	r2, r0, #9
 8000bec:	f47f af7d 	bne.w	8000aea <__aeabi_fmul+0x15e>
 8000bf0:	ea93 0f0c 	teq	r3, ip
 8000bf4:	f47f af70 	bne.w	8000ad8 <__aeabi_fmul+0x14c>
 8000bf8:	4608      	mov	r0, r1
 8000bfa:	e776      	b.n	8000aea <__aeabi_fmul+0x15e>
 8000bfc:	ea93 0f0c 	teq	r3, ip
 8000c00:	d104      	bne.n	8000c0c <__aeabi_fdiv+0x118>
 8000c02:	024b      	lsls	r3, r1, #9
 8000c04:	f43f af4c 	beq.w	8000aa0 <__aeabi_fmul+0x114>
 8000c08:	4608      	mov	r0, r1
 8000c0a:	e76e      	b.n	8000aea <__aeabi_fmul+0x15e>
 8000c0c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c10:	bf18      	it	ne
 8000c12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c16:	d1ca      	bne.n	8000bae <__aeabi_fdiv+0xba>
 8000c18:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c1c:	f47f af5c 	bne.w	8000ad8 <__aeabi_fmul+0x14c>
 8000c20:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c24:	f47f af3c 	bne.w	8000aa0 <__aeabi_fmul+0x114>
 8000c28:	e75f      	b.n	8000aea <__aeabi_fmul+0x15e>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_f2iz>:
 8000c2c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c30:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000c34:	d30f      	bcc.n	8000c56 <__aeabi_f2iz+0x2a>
 8000c36:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000c3a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c3e:	d90d      	bls.n	8000c5c <__aeabi_f2iz+0x30>
 8000c40:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c48:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c4c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c50:	bf18      	it	ne
 8000c52:	4240      	negne	r0, r0
 8000c54:	4770      	bx	lr
 8000c56:	f04f 0000 	mov.w	r0, #0
 8000c5a:	4770      	bx	lr
 8000c5c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c60:	d101      	bne.n	8000c66 <__aeabi_f2iz+0x3a>
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	d105      	bne.n	8000c72 <__aeabi_f2iz+0x46>
 8000c66:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000c6a:	bf08      	it	eq
 8000c6c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0000 	mov.w	r0, #0
 8000c76:	4770      	bx	lr

08000c78 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000c82:	4a38      	ldr	r2, [pc, #224]	@ (8000d64 <HD44780_Init+0xec>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000c88:	4b37      	ldr	r3, [pc, #220]	@ (8000d68 <HD44780_Init+0xf0>)
 8000c8a:	2208      	movs	r2, #8
 8000c8c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000c8e:	4b37      	ldr	r3, [pc, #220]	@ (8000d6c <HD44780_Init+0xf4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000c94:	4b33      	ldr	r3, [pc, #204]	@ (8000d64 <HD44780_Init+0xec>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d907      	bls.n	8000cac <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000c9c:	4b33      	ldr	r3, [pc, #204]	@ (8000d6c <HD44780_Init+0xf4>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b31      	ldr	r3, [pc, #196]	@ (8000d6c <HD44780_Init+0xf4>)
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	e006      	b.n	8000cba <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000cac:	4b2f      	ldr	r3, [pc, #188]	@ (8000d6c <HD44780_Init+0xf4>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d6c <HD44780_Init+0xf4>)
 8000cb8:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000cba:	f000 f99f 	bl	8000ffc <DelayInit>
  HAL_Delay(50);
 8000cbe:	2032      	movs	r0, #50	@ 0x32
 8000cc0:	f000 fe18 	bl	80018f4 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000cc4:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <HD44780_Init+0xf0>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 f95d 	bl	8000f88 <ExpanderWrite>
  HAL_Delay(1000);
 8000cce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cd2:	f000 fe0f 	bl	80018f4 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000cd6:	2030      	movs	r0, #48	@ 0x30
 8000cd8:	f000 f945 	bl	8000f66 <Write4Bits>
  DelayUS(4500);
 8000cdc:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000ce0:	f000 f9b4 	bl	800104c <DelayUS>

  Write4Bits(0x03 << 4);
 8000ce4:	2030      	movs	r0, #48	@ 0x30
 8000ce6:	f000 f93e 	bl	8000f66 <Write4Bits>
  DelayUS(4500);
 8000cea:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000cee:	f000 f9ad 	bl	800104c <DelayUS>

  Write4Bits(0x03 << 4);
 8000cf2:	2030      	movs	r0, #48	@ 0x30
 8000cf4:	f000 f937 	bl	8000f66 <Write4Bits>
  DelayUS(4500);
 8000cf8:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000cfc:	f000 f9a6 	bl	800104c <DelayUS>

  Write4Bits(0x02 << 4);
 8000d00:	2020      	movs	r0, #32
 8000d02:	f000 f930 	bl	8000f66 <Write4Bits>
  DelayUS(100);
 8000d06:	2064      	movs	r0, #100	@ 0x64
 8000d08:	f000 f9a0 	bl	800104c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000d0c:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <HD44780_Init+0xf4>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	f043 0320 	orr.w	r3, r3, #32
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f8e8 	bl	8000eec <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <HD44780_Init+0xf8>)
 8000d1e:	2204      	movs	r2, #4
 8000d20:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000d22:	f000 f875 	bl	8000e10 <HD44780_Display>
  HD44780_Clear();
 8000d26:	f000 f82b 	bl	8000d80 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000d2a:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <HD44780_Init+0xfc>)
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000d30:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <HD44780_Init+0xfc>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f8d6 	bl	8000eec <SendCommand>
  DelayUS(4500);
 8000d40:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000d44:	f000 f982 	bl	800104c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000d48:	490b      	ldr	r1, [pc, #44]	@ (8000d78 <HD44780_Init+0x100>)
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 f876 	bl	8000e3c <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000d50:	490a      	ldr	r1, [pc, #40]	@ (8000d7c <HD44780_Init+0x104>)
 8000d52:	2001      	movs	r0, #1
 8000d54:	f000 f872 	bl	8000e3c <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000d58:	f000 f81d 	bl	8000d96 <HD44780_Home>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000008f 	.word	0x2000008f
 8000d68:	20000090 	.word	0x20000090
 8000d6c:	2000008c 	.word	0x2000008c
 8000d70:	2000008d 	.word	0x2000008d
 8000d74:	2000008e 	.word	0x2000008e
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000008 	.word	0x20000008

08000d80 <HD44780_Clear>:

void HD44780_Clear()
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000d84:	2001      	movs	r0, #1
 8000d86:	f000 f8b1 	bl	8000eec <SendCommand>
  DelayUS(2000);
 8000d8a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d8e:	f000 f95d 	bl	800104c <DelayUS>
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HD44780_Home>:

void HD44780_Home()
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000d9a:	2002      	movs	r0, #2
 8000d9c:	f000 f8a6 	bl	8000eec <SendCommand>
  DelayUS(2000);
 8000da0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000da4:	f000 f952 	bl	800104c <DelayUS>
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b087      	sub	sp, #28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	460a      	mov	r2, r1
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	4613      	mov	r3, r2
 8000dba:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000dbc:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <HD44780_SetCursor+0x5c>)
 8000dbe:	f107 0408 	add.w	r4, r7, #8
 8000dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000dc8:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <HD44780_SetCursor+0x60>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	79ba      	ldrb	r2, [r7, #6]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d303      	bcc.n	8000dda <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <HD44780_SetCursor+0x60>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	3318      	adds	r3, #24
 8000de0:	443b      	add	r3, r7
 8000de2:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	4413      	add	r3, r2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 f877 	bl	8000eec <SendCommand>
}
 8000dfe:	bf00      	nop
 8000e00:	371c      	adds	r7, #28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd90      	pop	{r4, r7, pc}
 8000e06:	bf00      	nop
 8000e08:	08005050 	.word	0x08005050
 8000e0c:	2000008f 	.word	0x2000008f

08000e10 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <HD44780_Display+0x28>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HD44780_Display+0x28>)
 8000e20:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000e22:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <HD44780_Display+0x28>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 f85d 	bl	8000eec <SendCommand>
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	2000008d 	.word	0x2000008d

08000e3c <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	b25b      	sxtb	r3, r3
 8000e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f843 	bl	8000eec <SendCommand>
  for (int i=0; i<8; i++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	e009      	b.n	8000e80 <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	4413      	add	r3, r2
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 f847 	bl	8000f08 <SendChar>
  for (int i=0; i<8; i++)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b07      	cmp	r3, #7
 8000e84:	ddf2      	ble.n	8000e6c <HD44780_CreateSpecialChar+0x30>
  }
}
 8000e86:	bf00      	nop
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000e98:	e006      	b.n	8000ea8 <HD44780_PrintStr+0x18>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f830 	bl	8000f08 <SendChar>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1f4      	bne.n	8000e9a <HD44780_PrintStr+0xa>
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <HD44780_NoBacklight+0x14>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 f85e 	bl	8000f88 <ExpanderWrite>
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000090 	.word	0x20000090

08000ed4 <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	@ (8000ee8 <HD44780_Backlight+0x14>)
 8000eda:	2208      	movs	r2, #8
 8000edc:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f000 f852 	bl	8000f88 <ExpanderWrite>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000090 	.word	0x20000090

08000eec <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f812 	bl	8000f24 <Send>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2101      	movs	r1, #1
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f804 	bl	8000f24 <Send>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	460a      	mov	r2, r1
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	4613      	mov	r3, r2
 8000f32:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f023 030f 	bic.w	r3, r3, #15
 8000f3a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f80b 	bl	8000f66 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000f50:	7bba      	ldrb	r2, [r7, #14]
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 f804 	bl	8000f66 <Write4Bits>
}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f808 	bl	8000f88 <ExpanderWrite>
  PulseEnable(value);
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f820 	bl	8000fc0 <PulseEnable>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000f92:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <ExpanderWrite+0x30>)
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000f9e:	f107 020f 	add.w	r2, r7, #15
 8000fa2:	230a      	movs	r3, #10
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	214e      	movs	r1, #78	@ 0x4e
 8000faa:	4804      	ldr	r0, [pc, #16]	@ (8000fbc <ExpanderWrite+0x34>)
 8000fac:	f001 fd0c 	bl	80029c8 <HAL_I2C_Master_Transmit>
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000090 	.word	0x20000090
 8000fbc:	2000011c 	.word	0x2000011c

08000fc0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ffd8 	bl	8000f88 <ExpanderWrite>
  DelayUS(20);
 8000fd8:	2014      	movs	r0, #20
 8000fda:	f000 f837 	bl	800104c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f023 0304 	bic.w	r3, r3, #4
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ffce 	bl	8000f88 <ExpanderWrite>
  DelayUS(20);
 8000fec:	2014      	movs	r0, #20
 8000fee:	f000 f82d 	bl	800104c <DelayUS>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <DelayInit>:

static void DelayInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001000:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <DelayInit+0x48>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	4a0f      	ldr	r2, [pc, #60]	@ (8001044 <DelayInit+0x48>)
 8001006:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800100a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800100c:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <DelayInit+0x48>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	4a0c      	ldr	r2, [pc, #48]	@ (8001044 <DelayInit+0x48>)
 8001012:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001016:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <DelayInit+0x4c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0a      	ldr	r2, [pc, #40]	@ (8001048 <DelayInit+0x4c>)
 800101e:	f023 0301 	bic.w	r3, r3, #1
 8001022:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <DelayInit+0x4c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <DelayInit+0x4c>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001030:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <DelayInit+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001036:	bf00      	nop
  __ASM volatile ("NOP");
 8001038:	bf00      	nop
  __ASM volatile ("NOP");
 800103a:	bf00      	nop
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	e000edf0 	.word	0xe000edf0
 8001048:	e0001000 	.word	0xe0001000

0800104c <DelayUS>:

static void DelayUS(uint32_t us) {
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001054:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <DelayUS+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	@ (8001090 <DelayUS+0x44>)
 800105a:	fba2 2303 	umull	r2, r3, r2, r3
 800105e:	0c9a      	lsrs	r2, r3, #18
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	fb02 f303 	mul.w	r3, r2, r3
 8001066:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <DelayUS+0x48>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800106e:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <DelayUS+0x48>)
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8f6      	bhi.n	800106e <DelayUS+0x22>
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	371c      	adds	r7, #28
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	20000014 	.word	0x20000014
 8001090:	431bde83 	.word	0x431bde83
 8001094:	e0001000 	.word	0xe0001000

08001098 <HAL_GPIO_EXTI_Callback>:

RTC_HandleTypeDef hrtc;

/* USER CODE BEGIN PV */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_0){
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d114      	bne.n	80010d2 <HAL_GPIO_EXTI_Callback+0x3a>
	  uint32_t current_time = HAL_GetTick();
 80010a8:	f000 fc1a 	bl	80018e0 <HAL_GetTick>
 80010ac:	60f8      	str	r0, [r7, #12]
	  if ((current_time - last_time) > 200)
 80010ae:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <HAL_GPIO_EXTI_Callback+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	1a9b      	subs	r3, r3, r2
 80010b8:	2bc8      	cmp	r3, #200	@ 0xc8
 80010ba:	d90a      	bls.n	80010d2 <HAL_GPIO_EXTI_Callback+0x3a>
	  {
		  mode = 1 - mode;
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <HAL_GPIO_EXTI_Callback+0x48>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	f1c3 0301 	rsb	r3, r3, #1
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_GPIO_EXTI_Callback+0x48>)
 80010c8:	701a      	strb	r2, [r3, #0]
		  last_time = current_time;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b03      	ldr	r3, [pc, #12]	@ (80010dc <HAL_GPIO_EXTI_Callback+0x44>)
 80010d0:	701a      	strb	r2, [r3, #0]
	  }
  }
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200000e6 	.word	0x200000e6
 80010e0:	20000010 	.word	0x20000010
 80010e4:	00000000 	.word	0x00000000

080010e8 <Read_LM35_Temperature>:

float Read_LM35_Temperature(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
    uint32_t adc_value = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]

    HAL_ADC_Start(&hadc1);
 80010f2:	481f      	ldr	r0, [pc, #124]	@ (8001170 <Read_LM35_Temperature+0x88>)
 80010f4:	f000 fcfa 	bl	8001aec <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80010f8:	2164      	movs	r1, #100	@ 0x64
 80010fa:	481d      	ldr	r0, [pc, #116]	@ (8001170 <Read_LM35_Temperature+0x88>)
 80010fc:	f000 fdd0 	bl	8001ca0 <HAL_ADC_PollForConversion>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d103      	bne.n	800110e <Read_LM35_Temperature+0x26>
    {
        adc_value = HAL_ADC_GetValue(&hadc1);
 8001106:	481a      	ldr	r0, [pc, #104]	@ (8001170 <Read_LM35_Temperature+0x88>)
 8001108:	f000 fed0 	bl	8001eac <HAL_ADC_GetValue>
 800110c:	60f8      	str	r0, [r7, #12]
    }
    HAL_ADC_Stop(&hadc1);
 800110e:	4818      	ldr	r0, [pc, #96]	@ (8001170 <Read_LM35_Temperature+0x88>)
 8001110:	f000 fd9a 	bl	8001c48 <HAL_ADC_Stop>

    float voltage = (adc_value * 3300.0) / 4095.0; // mV
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f7ff f95d 	bl	80003d4 <__aeabi_ui2d>
 800111a:	a311      	add	r3, pc, #68	@ (adr r3, 8001160 <Read_LM35_Temperature+0x78>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f7ff f9d2 	bl	80004c8 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001168 <Read_LM35_Temperature+0x80>)
 800112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001132:	f7ff faf3 	bl	800071c <__aeabi_ddiv>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff fbd5 	bl	80008ec <__aeabi_d2f>
 8001142:	4603      	mov	r3, r0
 8001144:	60bb      	str	r3, [r7, #8]
    float temp = voltage / 10.0; // 10mV/°C
 8001146:	490b      	ldr	r1, [pc, #44]	@ (8001174 <Read_LM35_Temperature+0x8c>)
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f7ff fcd3 	bl	8000af4 <__aeabi_fdiv>
 800114e:	4603      	mov	r3, r0
 8001150:	607b      	str	r3, [r7, #4]
    return temp;
 8001152:	687b      	ldr	r3, [r7, #4]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	f3af 8000 	nop.w
 8001160:	00000000 	.word	0x00000000
 8001164:	40a9c800 	.word	0x40a9c800
 8001168:	00000000 	.word	0x00000000
 800116c:	40affe00 	.word	0x40affe00
 8001170:	200000ec 	.word	0x200000ec
 8001174:	41200000 	.word	0x41200000

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117e:	f000 fb57 	bl	8001830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001182:	f000 f89d 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001186:	f000 f9a7 	bl	80014d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800118a:	f000 f92d 	bl	80013e8 <MX_I2C1_Init>
  MX_RTC_Init();
 800118e:	f000 f959 	bl	8001444 <MX_RTC_Init>
  MX_ADC1_Init();
 8001192:	f000 f8eb 	bl	800136c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8001196:	2002      	movs	r0, #2
 8001198:	f7ff fd6e 	bl	8000c78 <HD44780_Init>
  HD44780_Clear();
 800119c:	f7ff fdf0 	bl	8000d80 <HD44780_Clear>
  HD44780_SetCursor(4,0);
 80011a0:	2100      	movs	r1, #0
 80011a2:	2004      	movs	r0, #4
 80011a4:	f7ff fe02 	bl	8000dac <HD44780_SetCursor>
  HD44780_PrintStr("Gia Huy");
 80011a8:	4837      	ldr	r0, [pc, #220]	@ (8001288 <main+0x110>)
 80011aa:	f7ff fe71 	bl	8000e90 <HD44780_PrintStr>
  HD44780_SetCursor(4,1);
 80011ae:	2101      	movs	r1, #1
 80011b0:	2004      	movs	r0, #4
 80011b2:	f7ff fdfb 	bl	8000dac <HD44780_SetCursor>
  HD44780_PrintStr("ITPlus");
 80011b6:	4835      	ldr	r0, [pc, #212]	@ (800128c <main+0x114>)
 80011b8:	f7ff fe6a 	bl	8000e90 <HD44780_PrintStr>
  HAL_Delay(2000);
 80011bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011c0:	f000 fb98 	bl	80018f4 <HAL_Delay>
  HD44780_Clear();
 80011c4:	f7ff fddc 	bl	8000d80 <HD44780_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 80011c8:	2200      	movs	r2, #0
 80011ca:	4931      	ldr	r1, [pc, #196]	@ (8001290 <main+0x118>)
 80011cc:	4831      	ldr	r0, [pc, #196]	@ (8001294 <main+0x11c>)
 80011ce:	f002 ff8d 	bl	80040ec <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80011d2:	2200      	movs	r2, #0
 80011d4:	4930      	ldr	r1, [pc, #192]	@ (8001298 <main+0x120>)
 80011d6:	482f      	ldr	r0, [pc, #188]	@ (8001294 <main+0x11c>)
 80011d8:	f002 fdfa 	bl	8003dd0 <HAL_RTC_GetTime>
    temperature = Read_LM35_Temperature();
 80011dc:	f7ff ff84 	bl	80010e8 <Read_LM35_Temperature>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fd22 	bl	8000c2c <__aeabi_f2iz>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a2c      	ldr	r2, [pc, #176]	@ (800129c <main+0x124>)
 80011ec:	6013      	str	r3, [r2, #0]
    sprintf(date, "%02d/%02d/20%02d", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 80011ee:	4b28      	ldr	r3, [pc, #160]	@ (8001290 <main+0x118>)
 80011f0:	789b      	ldrb	r3, [r3, #2]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b26      	ldr	r3, [pc, #152]	@ (8001290 <main+0x118>)
 80011f6:	785b      	ldrb	r3, [r3, #1]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4b25      	ldr	r3, [pc, #148]	@ (8001290 <main+0x118>)
 80011fc:	78db      	ldrb	r3, [r3, #3]
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	460b      	mov	r3, r1
 8001202:	4927      	ldr	r1, [pc, #156]	@ (80012a0 <main+0x128>)
 8001204:	4827      	ldr	r0, [pc, #156]	@ (80012a4 <main+0x12c>)
 8001206:	f003 fa67 	bl	80046d8 <siprintf>
    sprintf(time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800120a:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <main+0x120>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	4b21      	ldr	r3, [pc, #132]	@ (8001298 <main+0x120>)
 8001212:	785b      	ldrb	r3, [r3, #1]
 8001214:	4619      	mov	r1, r3
 8001216:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <main+0x120>)
 8001218:	789b      	ldrb	r3, [r3, #2]
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	460b      	mov	r3, r1
 800121e:	4922      	ldr	r1, [pc, #136]	@ (80012a8 <main+0x130>)
 8001220:	4822      	ldr	r0, [pc, #136]	@ (80012ac <main+0x134>)
 8001222:	f003 fa59 	bl	80046d8 <siprintf>
    sprintf(temp_str, "%doC", temperature);
 8001226:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <main+0x124>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	4920      	ldr	r1, [pc, #128]	@ (80012b0 <main+0x138>)
 800122e:	4821      	ldr	r0, [pc, #132]	@ (80012b4 <main+0x13c>)
 8001230:	f003 fa52 	bl	80046d8 <siprintf>

    HD44780_SetCursor(0,0);
 8001234:	2100      	movs	r1, #0
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff fdb8 	bl	8000dac <HD44780_SetCursor>
    HD44780_PrintStr(date);
 800123c:	4819      	ldr	r0, [pc, #100]	@ (80012a4 <main+0x12c>)
 800123e:	f7ff fe27 	bl	8000e90 <HD44780_PrintStr>
    HD44780_SetCursor(1,1);
 8001242:	2101      	movs	r1, #1
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff fdb1 	bl	8000dac <HD44780_SetCursor>
    HD44780_PrintStr(time);
 800124a:	4818      	ldr	r0, [pc, #96]	@ (80012ac <main+0x134>)
 800124c:	f7ff fe20 	bl	8000e90 <HD44780_PrintStr>
    HD44780_SetCursor(12,0);
 8001250:	2100      	movs	r1, #0
 8001252:	200c      	movs	r0, #12
 8001254:	f7ff fdaa 	bl	8000dac <HD44780_SetCursor>
	HD44780_PrintStr("Temp");
 8001258:	4817      	ldr	r0, [pc, #92]	@ (80012b8 <main+0x140>)
 800125a:	f7ff fe19 	bl	8000e90 <HD44780_PrintStr>
    HD44780_SetCursor(12,1);
 800125e:	2101      	movs	r1, #1
 8001260:	200c      	movs	r0, #12
 8001262:	f7ff fda3 	bl	8000dac <HD44780_SetCursor>
    HD44780_PrintStr(temp_str);
 8001266:	4813      	ldr	r0, [pc, #76]	@ (80012b4 <main+0x13c>)
 8001268:	f7ff fe12 	bl	8000e90 <HD44780_PrintStr>

    if (mode){
 800126c:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <main+0x144>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <main+0x102>
    	HD44780_Backlight();
 8001274:	f7ff fe2e 	bl	8000ed4 <HD44780_Backlight>
 8001278:	e001      	b.n	800127e <main+0x106>
    } else {
    	HD44780_NoBacklight();
 800127a:	f7ff fe1f 	bl	8000ebc <HD44780_NoBacklight>
    }

    HAL_Delay(500);
 800127e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001282:	f000 fb37 	bl	80018f4 <HAL_Delay>
    HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 8001286:	e79f      	b.n	80011c8 <main+0x50>
 8001288:	08005060 	.word	0x08005060
 800128c:	08005068 	.word	0x08005068
 8001290:	20000098 	.word	0x20000098
 8001294:	20000170 	.word	0x20000170
 8001298:	20000094 	.word	0x20000094
 800129c:	200000e8 	.word	0x200000e8
 80012a0:	08005070 	.word	0x08005070
 80012a4:	2000009c 	.word	0x2000009c
 80012a8:	08005084 	.word	0x08005084
 80012ac:	200000bc 	.word	0x200000bc
 80012b0:	08005094 	.word	0x08005094
 80012b4:	200000dc 	.word	0x200000dc
 80012b8:	0800509c 	.word	0x0800509c
 80012bc:	20000010 	.word	0x20000010

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b094      	sub	sp, #80	@ 0x50
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ca:	2228      	movs	r2, #40	@ 0x28
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 fa24 	bl	800471c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80012f0:	230a      	movs	r3, #10
 80012f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f4:	2301      	movs	r3, #1
 80012f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f8:	2310      	movs	r3, #16
 80012fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012fc:	2301      	movs	r3, #1
 80012fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001300:	2300      	movs	r3, #0
 8001302:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001304:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001308:	4618      	mov	r0, r3
 800130a:	f001 fec1 	bl	8003090 <HAL_RCC_OscConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001314:	f000 f920 	bl	8001558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001318:	230f      	movs	r3, #15
 800131a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001328:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f002 f92d 	bl	8003594 <HAL_RCC_ClockConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001340:	f000 f90a 	bl	8001558 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001344:	2303      	movs	r3, #3
 8001346:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001348:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800134c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	4618      	mov	r0, r3
 8001356:	f002 faab 	bl	80038b0 <HAL_RCCEx_PeriphCLKConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001360:	f000 f8fa 	bl	8001558 <Error_Handler>
  }
}
 8001364:	bf00      	nop
 8001366:	3750      	adds	r7, #80	@ 0x50
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800137c:	4b18      	ldr	r3, [pc, #96]	@ (80013e0 <MX_ADC1_Init+0x74>)
 800137e:	4a19      	ldr	r2, [pc, #100]	@ (80013e4 <MX_ADC1_Init+0x78>)
 8001380:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001382:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <MX_ADC1_Init+0x74>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001388:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <MX_ADC1_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800138e:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <MX_ADC1_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <MX_ADC1_Init+0x74>)
 8001396:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800139a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800139c:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <MX_ADC1_Init+0x74>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <MX_ADC1_Init+0x74>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013a8:	480d      	ldr	r0, [pc, #52]	@ (80013e0 <MX_ADC1_Init+0x74>)
 80013aa:	f000 fac7 	bl	800193c <HAL_ADC_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80013b4:	f000 f8d0 	bl	8001558 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013bc:	2301      	movs	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <MX_ADC1_Init+0x74>)
 80013ca:	f000 fd7b 	bl	8001ec4 <HAL_ADC_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80013d4:	f000 f8c0 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200000ec 	.word	0x200000ec
 80013e4:	40012400 	.word	0x40012400

080013e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <MX_I2C1_Init+0x50>)
 80013ee:	4a13      	ldr	r2, [pc, #76]	@ (800143c <MX_I2C1_Init+0x54>)
 80013f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013f2:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <MX_I2C1_Init+0x50>)
 80013f4:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <MX_I2C1_Init+0x58>)
 80013f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <MX_I2C1_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <MX_I2C1_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <MX_I2C1_Init+0x50>)
 8001406:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800140a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800140c:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <MX_I2C1_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <MX_I2C1_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001418:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <MX_I2C1_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141e:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <MX_I2C1_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	@ (8001438 <MX_I2C1_Init+0x50>)
 8001426:	f001 f98b 	bl	8002740 <HAL_I2C_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001430:	f000 f892 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2000011c 	.word	0x2000011c
 800143c:	40005400 	.word	0x40005400
 8001440:	000186a0 	.word	0x000186a0

08001444 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2100      	movs	r1, #0
 800144e:	460a      	mov	r2, r1
 8001450:	801a      	strh	r2, [r3, #0]
 8001452:	460a      	mov	r2, r1
 8001454:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001456:	2300      	movs	r3, #0
 8001458:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800145a:	4b1d      	ldr	r3, [pc, #116]	@ (80014d0 <MX_RTC_Init+0x8c>)
 800145c:	4a1d      	ldr	r2, [pc, #116]	@ (80014d4 <MX_RTC_Init+0x90>)
 800145e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <MX_RTC_Init+0x8c>)
 8001462:	f04f 32ff 	mov.w	r2, #4294967295
 8001466:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001468:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <MX_RTC_Init+0x8c>)
 800146a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800146e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001470:	4817      	ldr	r0, [pc, #92]	@ (80014d0 <MX_RTC_Init+0x8c>)
 8001472:	f002 fb89 	bl	8003b88 <HAL_RTC_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 800147c:	f000 f86c 	bl	8001558 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8001480:	2323      	movs	r3, #35	@ 0x23
 8001482:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x14;
 8001484:	2314      	movs	r3, #20
 8001486:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001488:	2300      	movs	r3, #0
 800148a:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2201      	movs	r2, #1
 8001490:	4619      	mov	r1, r3
 8001492:	480f      	ldr	r0, [pc, #60]	@ (80014d0 <MX_RTC_Init+0x8c>)
 8001494:	f002 fc04 	bl	8003ca0 <HAL_RTC_SetTime>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800149e:	f000 f85b 	bl	8001558 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80014a2:	2302      	movs	r3, #2
 80014a4:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_APRIL;
 80014a6:	2304      	movs	r3, #4
 80014a8:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x15;
 80014aa:	2315      	movs	r3, #21
 80014ac:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x25;
 80014ae:	2325      	movs	r3, #37	@ 0x25
 80014b0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	2201      	movs	r2, #1
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <MX_RTC_Init+0x8c>)
 80014ba:	f002 fd61 	bl	8003f80 <HAL_RTC_SetDate>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80014c4:	f000 f848 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000170 	.word	0x20000170
 80014d4:	40002800 	.word	0x40002800

080014d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b17      	ldr	r3, [pc, #92]	@ (800154c <MX_GPIO_Init+0x74>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a16      	ldr	r2, [pc, #88]	@ (800154c <MX_GPIO_Init+0x74>)
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b14      	ldr	r3, [pc, #80]	@ (800154c <MX_GPIO_Init+0x74>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <MX_GPIO_Init+0x74>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a10      	ldr	r2, [pc, #64]	@ (800154c <MX_GPIO_Init+0x74>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <MX_GPIO_Init+0x74>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800151c:	2301      	movs	r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001520:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <MX_GPIO_Init+0x78>)
 8001522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001524:	2301      	movs	r3, #1
 8001526:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	4619      	mov	r1, r3
 800152e:	4809      	ldr	r0, [pc, #36]	@ (8001554 <MX_GPIO_Init+0x7c>)
 8001530:	f000 ff6a 	bl	8002408 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	2100      	movs	r1, #0
 8001538:	2006      	movs	r0, #6
 800153a:	f000 ff2e 	bl	800239a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800153e:	2006      	movs	r0, #6
 8001540:	f000 ff47 	bl	80023d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001544:	bf00      	nop
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000
 8001550:	10210000 	.word	0x10210000
 8001554:	40010800 	.word	0x40010800

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <Error_Handler+0x8>

08001564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800156a:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <HAL_MspInit+0x5c>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	4a14      	ldr	r2, [pc, #80]	@ (80015c0 <HAL_MspInit+0x5c>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6193      	str	r3, [r2, #24]
 8001576:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <HAL_MspInit+0x5c>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <HAL_MspInit+0x5c>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	4a0e      	ldr	r2, [pc, #56]	@ (80015c0 <HAL_MspInit+0x5c>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800158c:	61d3      	str	r3, [r2, #28]
 800158e:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <HAL_MspInit+0x5c>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_MspInit+0x60>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	4a04      	ldr	r2, [pc, #16]	@ (80015c4 <HAL_MspInit+0x60>)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40010000 	.word	0x40010000

080015c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a14      	ldr	r2, [pc, #80]	@ (8001634 <HAL_ADC_MspInit+0x6c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d121      	bne.n	800162c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015e8:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <HAL_ADC_MspInit+0x70>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <HAL_ADC_MspInit+0x70>)
 80015ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <HAL_ADC_MspInit+0x70>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001600:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <HAL_ADC_MspInit+0x70>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a0c      	ldr	r2, [pc, #48]	@ (8001638 <HAL_ADC_MspInit+0x70>)
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <HAL_ADC_MspInit+0x70>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001618:	2302      	movs	r3, #2
 800161a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800161c:	2303      	movs	r3, #3
 800161e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	4619      	mov	r1, r3
 8001626:	4805      	ldr	r0, [pc, #20]	@ (800163c <HAL_ADC_MspInit+0x74>)
 8001628:	f000 feee 	bl	8002408 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800162c:	bf00      	nop
 800162e:	3720      	adds	r7, #32
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40012400 	.word	0x40012400
 8001638:	40021000 	.word	0x40021000
 800163c:	40010800 	.word	0x40010800

08001640 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a15      	ldr	r2, [pc, #84]	@ (80016b0 <HAL_I2C_MspInit+0x70>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d123      	bne.n	80016a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001660:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <HAL_I2C_MspInit+0x74>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a13      	ldr	r2, [pc, #76]	@ (80016b4 <HAL_I2C_MspInit+0x74>)
 8001666:	f043 0308 	orr.w	r3, r3, #8
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <HAL_I2C_MspInit+0x74>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001678:	23c0      	movs	r3, #192	@ 0xc0
 800167a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800167c:	2312      	movs	r3, #18
 800167e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	4619      	mov	r1, r3
 800168a:	480b      	ldr	r0, [pc, #44]	@ (80016b8 <HAL_I2C_MspInit+0x78>)
 800168c:	f000 febc 	bl	8002408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001690:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <HAL_I2C_MspInit+0x74>)
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	4a07      	ldr	r2, [pc, #28]	@ (80016b4 <HAL_I2C_MspInit+0x74>)
 8001696:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800169a:	61d3      	str	r3, [r2, #28]
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <HAL_I2C_MspInit+0x74>)
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40005400 	.word	0x40005400
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010c00 	.word	0x40010c00

080016bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0b      	ldr	r2, [pc, #44]	@ (80016f8 <HAL_RTC_MspInit+0x3c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d110      	bne.n	80016f0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80016ce:	f001 fcd3 	bl	8003078 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80016d2:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <HAL_RTC_MspInit+0x40>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a09      	ldr	r2, [pc, #36]	@ (80016fc <HAL_RTC_MspInit+0x40>)
 80016d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <HAL_RTC_MspInit+0x40>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016ea:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <HAL_RTC_MspInit+0x44>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40002800 	.word	0x40002800
 80016fc:	40021000 	.word	0x40021000
 8001700:	4242043c 	.word	0x4242043c

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <NMI_Handler+0x4>

0800170c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <MemManage_Handler+0x4>

0800171c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <UsageFault_Handler+0x4>

0800172c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001754:	f000 f8b2 	bl	80018bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001760:	2001      	movs	r0, #1
 8001762:	f000 ffd5 	bl	8002710 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001774:	4a14      	ldr	r2, [pc, #80]	@ (80017c8 <_sbrk+0x5c>)
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <_sbrk+0x60>)
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001780:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001788:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <_sbrk+0x64>)
 800178a:	4a12      	ldr	r2, [pc, #72]	@ (80017d4 <_sbrk+0x68>)
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178e:	4b10      	ldr	r3, [pc, #64]	@ (80017d0 <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	429a      	cmp	r2, r3
 800179a:	d207      	bcs.n	80017ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800179c:	f002 ffc6 	bl	800472c <__errno>
 80017a0:	4603      	mov	r3, r0
 80017a2:	220c      	movs	r2, #12
 80017a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	e009      	b.n	80017c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b2:	4b07      	ldr	r3, [pc, #28]	@ (80017d0 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	4a05      	ldr	r2, [pc, #20]	@ (80017d0 <_sbrk+0x64>)
 80017bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20005000 	.word	0x20005000
 80017cc:	00000400 	.word	0x00000400
 80017d0:	20000184 	.word	0x20000184
 80017d4:	200002d8 	.word	0x200002d8

080017d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e4:	f7ff fff8 	bl	80017d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e8:	480b      	ldr	r0, [pc, #44]	@ (8001818 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017ea:	490c      	ldr	r1, [pc, #48]	@ (800181c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001820 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001800:	4c09      	ldr	r4, [pc, #36]	@ (8001828 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800180e:	f002 ff93 	bl	8004738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001812:	f7ff fcb1 	bl	8001178 <main>
  bx lr
 8001816:	4770      	bx	lr
  ldr r0, =_sdata
 8001818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800181c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001820:	08005120 	.word	0x08005120
  ldr r2, =_sbss
 8001824:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001828:	200002d4 	.word	0x200002d4

0800182c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC1_2_IRQHandler>
	...

08001830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <HAL_Init+0x28>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a07      	ldr	r2, [pc, #28]	@ (8001858 <HAL_Init+0x28>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f000 fd9f 	bl	8002384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001846:	200f      	movs	r0, #15
 8001848:	f000 f808 	bl	800185c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800184c:	f7ff fe8a 	bl	8001564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40022000 	.word	0x40022000

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_InitTick+0x54>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_InitTick+0x58>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001872:	fbb3 f3f1 	udiv	r3, r3, r1
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f000 fdb7 	bl	80023ee <HAL_SYSTICK_Config>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e00e      	b.n	80018a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b0f      	cmp	r3, #15
 800188e:	d80a      	bhi.n	80018a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001890:	2200      	movs	r2, #0
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f000 fd7f 	bl	800239a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800189c:	4a06      	ldr	r2, [pc, #24]	@ (80018b8 <HAL_InitTick+0x5c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e000      	b.n	80018a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000014 	.word	0x20000014
 80018b4:	2000001c 	.word	0x2000001c
 80018b8:	20000018 	.word	0x20000018

080018bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <HAL_IncTick+0x1c>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_IncTick+0x20>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a03      	ldr	r2, [pc, #12]	@ (80018dc <HAL_IncTick+0x20>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	2000001c 	.word	0x2000001c
 80018dc:	20000188 	.word	0x20000188

080018e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b02      	ldr	r3, [pc, #8]	@ (80018f0 <HAL_GetTick+0x10>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	20000188 	.word	0x20000188

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff fff0 	bl	80018e0 <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d005      	beq.n	800191a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190e:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <HAL_Delay+0x44>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191a:	bf00      	nop
 800191c:	f7ff ffe0 	bl	80018e0 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	d8f7      	bhi.n	800191c <HAL_Delay+0x28>
  {
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000001c 	.word	0x2000001c

0800193c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0be      	b.n	8001adc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff fe24 	bl	80015c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 fbf1 	bl	8002168 <ADC_ConversionStop_Disable>
 8001986:	4603      	mov	r3, r0
 8001988:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 8099 	bne.w	8001aca <HAL_ADC_Init+0x18e>
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f040 8095 	bne.w	8001aca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019a8:	f023 0302 	bic.w	r3, r3, #2
 80019ac:	f043 0202 	orr.w	r2, r3, #2
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7b1b      	ldrb	r3, [r3, #12]
 80019c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019d4:	d003      	beq.n	80019de <HAL_ADC_Init+0xa2>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d102      	bne.n	80019e4 <HAL_ADC_Init+0xa8>
 80019de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019e2:	e000      	b.n	80019e6 <HAL_ADC_Init+0xaa>
 80019e4:	2300      	movs	r3, #0
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7d1b      	ldrb	r3, [r3, #20]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d119      	bne.n	8001a28 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7b1b      	ldrb	r3, [r3, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d109      	bne.n	8001a10 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	035a      	lsls	r2, r3, #13
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	e00b      	b.n	8001a28 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a14:	f043 0220 	orr.w	r2, r3, #32
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a20:	f043 0201 	orr.w	r2, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	4b28      	ldr	r3, [pc, #160]	@ (8001ae4 <HAL_ADC_Init+0x1a8>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	68b9      	ldr	r1, [r7, #8]
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a58:	d003      	beq.n	8001a62 <HAL_ADC_Init+0x126>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d104      	bne.n	8001a6c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	051b      	lsls	r3, r3, #20
 8001a6a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a72:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <HAL_ADC_Init+0x1ac>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d10b      	bne.n	8001aa8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	f043 0201 	orr.w	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001aa6:	e018      	b.n	8001ada <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aac:	f023 0312 	bic.w	r3, r3, #18
 8001ab0:	f043 0210 	orr.w	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ac8:	e007      	b.n	8001ada <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ace:	f043 0210 	orr.w	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	ffe1f7fd 	.word	0xffe1f7fd
 8001ae8:	ff1f0efe 	.word	0xff1f0efe

08001aec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_Start+0x1a>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e098      	b.n	8001c38 <HAL_ADC_Start+0x14c>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fad0 	bl	80020b4 <ADC_Enable>
 8001b14:	4603      	mov	r3, r0
 8001b16:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 8087 	bne.w	8001c2e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a41      	ldr	r2, [pc, #260]	@ (8001c40 <HAL_ADC_Start+0x154>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d105      	bne.n	8001b4a <HAL_ADC_Start+0x5e>
 8001b3e:	4b41      	ldr	r3, [pc, #260]	@ (8001c44 <HAL_ADC_Start+0x158>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d115      	bne.n	8001b76 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d026      	beq.n	8001bb2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b68:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b6c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b74:	e01d      	b.n	8001bb2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a2f      	ldr	r2, [pc, #188]	@ (8001c44 <HAL_ADC_Start+0x158>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d004      	beq.n	8001b96 <HAL_ADC_Start+0xaa>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a2b      	ldr	r2, [pc, #172]	@ (8001c40 <HAL_ADC_Start+0x154>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d10d      	bne.n	8001bb2 <HAL_ADC_Start+0xc6>
 8001b96:	4b2b      	ldr	r3, [pc, #172]	@ (8001c44 <HAL_ADC_Start+0x158>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001baa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d006      	beq.n	8001bcc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc2:	f023 0206 	bic.w	r2, r3, #6
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bca:	e002      	b.n	8001bd2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f06f 0202 	mvn.w	r2, #2
 8001be2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001bee:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001bf2:	d113      	bne.n	8001c1c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001bf8:	4a11      	ldr	r2, [pc, #68]	@ (8001c40 <HAL_ADC_Start+0x154>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d105      	bne.n	8001c0a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001bfe:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <HAL_ADC_Start+0x158>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d108      	bne.n	8001c1c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	e00c      	b.n	8001c36 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	e003      	b.n	8001c36 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40012800 	.word	0x40012800
 8001c44:	40012400 	.word	0x40012400

08001c48 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADC_Stop+0x1a>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e01a      	b.n	8001c98 <HAL_ADC_Stop+0x50>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fa7c 	bl	8002168 <ADC_ConversionStop_Disable>
 8001c70:	4603      	mov	r3, r0
 8001c72:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	f043 0201 	orr.w	r2, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001cb6:	f7ff fe13 	bl	80018e0 <HAL_GetTick>
 8001cba:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00b      	beq.n	8001ce2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cce:	f043 0220 	orr.w	r2, r3, #32
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0d3      	b.n	8001e8a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d131      	bne.n	8001d54 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d12a      	bne.n	8001d54 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001cfe:	e021      	b.n	8001d44 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d06:	d01d      	beq.n	8001d44 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <HAL_ADC_PollForConversion+0x7e>
 8001d0e:	f7ff fde7 	bl	80018e0 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d212      	bcs.n	8001d44 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10b      	bne.n	8001d44 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d30:	f043 0204 	orr.w	r2, r3, #4
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e0a2      	b.n	8001e8a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0d6      	beq.n	8001d00 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001d52:	e070      	b.n	8001e36 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001d54:	4b4f      	ldr	r3, [pc, #316]	@ (8001e94 <HAL_ADC_PollForConversion+0x1f4>)
 8001d56:	681c      	ldr	r4, [r3, #0]
 8001d58:	2002      	movs	r0, #2
 8001d5a:	f001 fe5f 	bl	8003a1c <HAL_RCCEx_GetPeriphCLKFreq>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6919      	ldr	r1, [r3, #16]
 8001d6a:	4b4b      	ldr	r3, [pc, #300]	@ (8001e98 <HAL_ADC_PollForConversion+0x1f8>)
 8001d6c:	400b      	ands	r3, r1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d118      	bne.n	8001da4 <HAL_ADC_PollForConversion+0x104>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68d9      	ldr	r1, [r3, #12]
 8001d78:	4b48      	ldr	r3, [pc, #288]	@ (8001e9c <HAL_ADC_PollForConversion+0x1fc>)
 8001d7a:	400b      	ands	r3, r1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d111      	bne.n	8001da4 <HAL_ADC_PollForConversion+0x104>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6919      	ldr	r1, [r3, #16]
 8001d86:	4b46      	ldr	r3, [pc, #280]	@ (8001ea0 <HAL_ADC_PollForConversion+0x200>)
 8001d88:	400b      	ands	r3, r1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d108      	bne.n	8001da0 <HAL_ADC_PollForConversion+0x100>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68d9      	ldr	r1, [r3, #12]
 8001d94:	4b43      	ldr	r3, [pc, #268]	@ (8001ea4 <HAL_ADC_PollForConversion+0x204>)
 8001d96:	400b      	ands	r3, r1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_PollForConversion+0x100>
 8001d9c:	2314      	movs	r3, #20
 8001d9e:	e020      	b.n	8001de2 <HAL_ADC_PollForConversion+0x142>
 8001da0:	2329      	movs	r3, #41	@ 0x29
 8001da2:	e01e      	b.n	8001de2 <HAL_ADC_PollForConversion+0x142>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6919      	ldr	r1, [r3, #16]
 8001daa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea0 <HAL_ADC_PollForConversion+0x200>)
 8001dac:	400b      	ands	r3, r1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <HAL_ADC_PollForConversion+0x120>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68d9      	ldr	r1, [r3, #12]
 8001db8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea4 <HAL_ADC_PollForConversion+0x204>)
 8001dba:	400b      	ands	r3, r1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00d      	beq.n	8001ddc <HAL_ADC_PollForConversion+0x13c>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6919      	ldr	r1, [r3, #16]
 8001dc6:	4b38      	ldr	r3, [pc, #224]	@ (8001ea8 <HAL_ADC_PollForConversion+0x208>)
 8001dc8:	400b      	ands	r3, r1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d108      	bne.n	8001de0 <HAL_ADC_PollForConversion+0x140>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68d9      	ldr	r1, [r3, #12]
 8001dd4:	4b34      	ldr	r3, [pc, #208]	@ (8001ea8 <HAL_ADC_PollForConversion+0x208>)
 8001dd6:	400b      	ands	r3, r1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_ADC_PollForConversion+0x140>
 8001ddc:	2354      	movs	r3, #84	@ 0x54
 8001dde:	e000      	b.n	8001de2 <HAL_ADC_PollForConversion+0x142>
 8001de0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001de8:	e021      	b.n	8001e2e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d01a      	beq.n	8001e28 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <HAL_ADC_PollForConversion+0x168>
 8001df8:	f7ff fd72 	bl	80018e0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d20f      	bcs.n	8001e28 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d90b      	bls.n	8001e28 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e14:	f043 0204 	orr.w	r2, r3, #4
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e030      	b.n	8001e8a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d8d9      	bhi.n	8001dea <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f06f 0212 	mvn.w	r2, #18
 8001e3e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e44:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e56:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e5a:	d115      	bne.n	8001e88 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d111      	bne.n	8001e88 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd90      	pop	{r4, r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000014 	.word	0x20000014
 8001e98:	24924924 	.word	0x24924924
 8001e9c:	00924924 	.word	0x00924924
 8001ea0:	12492492 	.word	0x12492492
 8001ea4:	00492492 	.word	0x00492492
 8001ea8:	00249249 	.word	0x00249249

08001eac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x20>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e0dc      	b.n	800209e <HAL_ADC_ConfigChannel+0x1da>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b06      	cmp	r3, #6
 8001ef2:	d81c      	bhi.n	8001f2e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	3b05      	subs	r3, #5
 8001f06:	221f      	movs	r2, #31
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	4019      	ands	r1, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3b05      	subs	r3, #5
 8001f20:	fa00 f203 	lsl.w	r2, r0, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f2c:	e03c      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b0c      	cmp	r3, #12
 8001f34:	d81c      	bhi.n	8001f70 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	3b23      	subs	r3, #35	@ 0x23
 8001f48:	221f      	movs	r2, #31
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	4019      	ands	r1, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	3b23      	subs	r3, #35	@ 0x23
 8001f62:	fa00 f203 	lsl.w	r2, r0, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f6e:	e01b      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	3b41      	subs	r3, #65	@ 0x41
 8001f82:	221f      	movs	r2, #31
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	4019      	ands	r1, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	3b41      	subs	r3, #65	@ 0x41
 8001f9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b09      	cmp	r3, #9
 8001fae:	d91c      	bls.n	8001fea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68d9      	ldr	r1, [r3, #12]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3b1e      	subs	r3, #30
 8001fc2:	2207      	movs	r2, #7
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	4019      	ands	r1, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6898      	ldr	r0, [r3, #8]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b1e      	subs	r3, #30
 8001fdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	60da      	str	r2, [r3, #12]
 8001fe8:	e019      	b.n	800201e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6919      	ldr	r1, [r3, #16]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	2207      	movs	r2, #7
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	4019      	ands	r1, r3
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6898      	ldr	r0, [r3, #8]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	fa00 f203 	lsl.w	r2, r0, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b10      	cmp	r3, #16
 8002024:	d003      	beq.n	800202e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800202a:	2b11      	cmp	r3, #17
 800202c:	d132      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1d      	ldr	r2, [pc, #116]	@ (80020a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d125      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d126      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002054:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b10      	cmp	r3, #16
 800205c:	d11a      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800205e:	4b13      	ldr	r3, [pc, #76]	@ (80020ac <HAL_ADC_ConfigChannel+0x1e8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a13      	ldr	r2, [pc, #76]	@ (80020b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	0c9a      	lsrs	r2, r3, #18
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002074:	e002      	b.n	800207c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	3b01      	subs	r3, #1
 800207a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f9      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x1b2>
 8002082:	e007      	b.n	8002094 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002088:	f043 0220 	orr.w	r2, r3, #32
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800209c:	7bfb      	ldrb	r3, [r7, #15]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	40012400 	.word	0x40012400
 80020ac:	20000014 	.word	0x20000014
 80020b0:	431bde83 	.word	0x431bde83

080020b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d040      	beq.n	8002154 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002160 <ADC_Enable+0xac>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002164 <ADC_Enable+0xb0>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	0c9b      	lsrs	r3, r3, #18
 80020ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020f0:	e002      	b.n	80020f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f9      	bne.n	80020f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020fe:	f7ff fbef 	bl	80018e0 <HAL_GetTick>
 8002102:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002104:	e01f      	b.n	8002146 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002106:	f7ff fbeb 	bl	80018e0 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d918      	bls.n	8002146 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	d011      	beq.n	8002146 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002126:	f043 0210 	orr.w	r2, r3, #16
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e007      	b.n	8002156 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b01      	cmp	r3, #1
 8002152:	d1d8      	bne.n	8002106 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000014 	.word	0x20000014
 8002164:	431bde83 	.word	0x431bde83

08002168 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	d12e      	bne.n	80021e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0201 	bic.w	r2, r2, #1
 8002190:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002192:	f7ff fba5 	bl	80018e0 <HAL_GetTick>
 8002196:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002198:	e01b      	b.n	80021d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800219a:	f7ff fba1 	bl	80018e0 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d914      	bls.n	80021d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d10d      	bne.n	80021d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ba:	f043 0210 	orr.w	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c6:	f043 0201 	orr.w	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e007      	b.n	80021e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d0dc      	beq.n	800219a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002208:	4013      	ands	r3, r2
 800220a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002214:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800221c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221e:	4a04      	ldr	r2, [pc, #16]	@ (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	60d3      	str	r3, [r2, #12]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002238:	4b04      	ldr	r3, [pc, #16]	@ (800224c <__NVIC_GetPriorityGrouping+0x18>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	f003 0307 	and.w	r3, r3, #7
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	2b00      	cmp	r3, #0
 8002260:	db0b      	blt.n	800227a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	f003 021f 	and.w	r2, r3, #31
 8002268:	4906      	ldr	r1, [pc, #24]	@ (8002284 <__NVIC_EnableIRQ+0x34>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2001      	movs	r0, #1
 8002272:	fa00 f202 	lsl.w	r2, r0, r2
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	e000e100 	.word	0xe000e100

08002288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	2b00      	cmp	r3, #0
 800229a:	db0a      	blt.n	80022b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	490c      	ldr	r1, [pc, #48]	@ (80022d4 <__NVIC_SetPriority+0x4c>)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	0112      	lsls	r2, r2, #4
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	440b      	add	r3, r1
 80022ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b0:	e00a      	b.n	80022c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4908      	ldr	r1, [pc, #32]	@ (80022d8 <__NVIC_SetPriority+0x50>)
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	3b04      	subs	r3, #4
 80022c0:	0112      	lsls	r2, r2, #4
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	440b      	add	r3, r1
 80022c6:	761a      	strb	r2, [r3, #24]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000e100 	.word	0xe000e100
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	@ 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f1c3 0307 	rsb	r3, r3, #7
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	bf28      	it	cs
 80022fa:	2304      	movcs	r3, #4
 80022fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3304      	adds	r3, #4
 8002302:	2b06      	cmp	r3, #6
 8002304:	d902      	bls.n	800230c <NVIC_EncodePriority+0x30>
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3b03      	subs	r3, #3
 800230a:	e000      	b.n	800230e <NVIC_EncodePriority+0x32>
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	f04f 32ff 	mov.w	r2, #4294967295
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	401a      	ands	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43d9      	mvns	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	4313      	orrs	r3, r2
         );
}
 8002336:	4618      	mov	r0, r3
 8002338:	3724      	adds	r7, #36	@ 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002350:	d301      	bcc.n	8002356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002352:	2301      	movs	r3, #1
 8002354:	e00f      	b.n	8002376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002356:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <SysTick_Config+0x40>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235e:	210f      	movs	r1, #15
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	f7ff ff90 	bl	8002288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002368:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <SysTick_Config+0x40>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236e:	4b04      	ldr	r3, [pc, #16]	@ (8002380 <SysTick_Config+0x40>)
 8002370:	2207      	movs	r2, #7
 8002372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	e000e010 	.word	0xe000e010

08002384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff2d 	bl	80021ec <__NVIC_SetPriorityGrouping>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ac:	f7ff ff42 	bl	8002234 <__NVIC_GetPriorityGrouping>
 80023b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	6978      	ldr	r0, [r7, #20]
 80023b8:	f7ff ff90 	bl	80022dc <NVIC_EncodePriority>
 80023bc:	4602      	mov	r2, r0
 80023be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff5f 	bl	8002288 <__NVIC_SetPriority>
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff35 	bl	8002250 <__NVIC_EnableIRQ>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ffa2 	bl	8002340 <SysTick_Config>
 80023fc:	4603      	mov	r3, r0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002408:	b480      	push	{r7}
 800240a:	b08b      	sub	sp, #44	@ 0x2c
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800241a:	e169      	b.n	80026f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800241c:	2201      	movs	r2, #1
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	429a      	cmp	r2, r3
 8002436:	f040 8158 	bne.w	80026ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4a9a      	ldr	r2, [pc, #616]	@ (80026a8 <HAL_GPIO_Init+0x2a0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d05e      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 8002444:	4a98      	ldr	r2, [pc, #608]	@ (80026a8 <HAL_GPIO_Init+0x2a0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d875      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 800244a:	4a98      	ldr	r2, [pc, #608]	@ (80026ac <HAL_GPIO_Init+0x2a4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d058      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 8002450:	4a96      	ldr	r2, [pc, #600]	@ (80026ac <HAL_GPIO_Init+0x2a4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d86f      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 8002456:	4a96      	ldr	r2, [pc, #600]	@ (80026b0 <HAL_GPIO_Init+0x2a8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d052      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 800245c:	4a94      	ldr	r2, [pc, #592]	@ (80026b0 <HAL_GPIO_Init+0x2a8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d869      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 8002462:	4a94      	ldr	r2, [pc, #592]	@ (80026b4 <HAL_GPIO_Init+0x2ac>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d04c      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 8002468:	4a92      	ldr	r2, [pc, #584]	@ (80026b4 <HAL_GPIO_Init+0x2ac>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d863      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 800246e:	4a92      	ldr	r2, [pc, #584]	@ (80026b8 <HAL_GPIO_Init+0x2b0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d046      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 8002474:	4a90      	ldr	r2, [pc, #576]	@ (80026b8 <HAL_GPIO_Init+0x2b0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d85d      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 800247a:	2b12      	cmp	r3, #18
 800247c:	d82a      	bhi.n	80024d4 <HAL_GPIO_Init+0xcc>
 800247e:	2b12      	cmp	r3, #18
 8002480:	d859      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 8002482:	a201      	add	r2, pc, #4	@ (adr r2, 8002488 <HAL_GPIO_Init+0x80>)
 8002484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002488:	08002503 	.word	0x08002503
 800248c:	080024dd 	.word	0x080024dd
 8002490:	080024ef 	.word	0x080024ef
 8002494:	08002531 	.word	0x08002531
 8002498:	08002537 	.word	0x08002537
 800249c:	08002537 	.word	0x08002537
 80024a0:	08002537 	.word	0x08002537
 80024a4:	08002537 	.word	0x08002537
 80024a8:	08002537 	.word	0x08002537
 80024ac:	08002537 	.word	0x08002537
 80024b0:	08002537 	.word	0x08002537
 80024b4:	08002537 	.word	0x08002537
 80024b8:	08002537 	.word	0x08002537
 80024bc:	08002537 	.word	0x08002537
 80024c0:	08002537 	.word	0x08002537
 80024c4:	08002537 	.word	0x08002537
 80024c8:	08002537 	.word	0x08002537
 80024cc:	080024e5 	.word	0x080024e5
 80024d0:	080024f9 	.word	0x080024f9
 80024d4:	4a79      	ldr	r2, [pc, #484]	@ (80026bc <HAL_GPIO_Init+0x2b4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024da:	e02c      	b.n	8002536 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	623b      	str	r3, [r7, #32]
          break;
 80024e2:	e029      	b.n	8002538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	3304      	adds	r3, #4
 80024ea:	623b      	str	r3, [r7, #32]
          break;
 80024ec:	e024      	b.n	8002538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	3308      	adds	r3, #8
 80024f4:	623b      	str	r3, [r7, #32]
          break;
 80024f6:	e01f      	b.n	8002538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	330c      	adds	r3, #12
 80024fe:	623b      	str	r3, [r7, #32]
          break;
 8002500:	e01a      	b.n	8002538 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800250a:	2304      	movs	r3, #4
 800250c:	623b      	str	r3, [r7, #32]
          break;
 800250e:	e013      	b.n	8002538 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d105      	bne.n	8002524 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002518:	2308      	movs	r3, #8
 800251a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	611a      	str	r2, [r3, #16]
          break;
 8002522:	e009      	b.n	8002538 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002524:	2308      	movs	r3, #8
 8002526:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	615a      	str	r2, [r3, #20]
          break;
 800252e:	e003      	b.n	8002538 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002530:	2300      	movs	r3, #0
 8002532:	623b      	str	r3, [r7, #32]
          break;
 8002534:	e000      	b.n	8002538 <HAL_GPIO_Init+0x130>
          break;
 8002536:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2bff      	cmp	r3, #255	@ 0xff
 800253c:	d801      	bhi.n	8002542 <HAL_GPIO_Init+0x13a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	e001      	b.n	8002546 <HAL_GPIO_Init+0x13e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3304      	adds	r3, #4
 8002546:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2bff      	cmp	r3, #255	@ 0xff
 800254c:	d802      	bhi.n	8002554 <HAL_GPIO_Init+0x14c>
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	e002      	b.n	800255a <HAL_GPIO_Init+0x152>
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	3b08      	subs	r3, #8
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	210f      	movs	r1, #15
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	401a      	ands	r2, r3
 800256c:	6a39      	ldr	r1, [r7, #32]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	fa01 f303 	lsl.w	r3, r1, r3
 8002574:	431a      	orrs	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 80b1 	beq.w	80026ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002588:	4b4d      	ldr	r3, [pc, #308]	@ (80026c0 <HAL_GPIO_Init+0x2b8>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	4a4c      	ldr	r2, [pc, #304]	@ (80026c0 <HAL_GPIO_Init+0x2b8>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6193      	str	r3, [r2, #24]
 8002594:	4b4a      	ldr	r3, [pc, #296]	@ (80026c0 <HAL_GPIO_Init+0x2b8>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025a0:	4a48      	ldr	r2, [pc, #288]	@ (80026c4 <HAL_GPIO_Init+0x2bc>)
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	089b      	lsrs	r3, r3, #2
 80025a6:	3302      	adds	r3, #2
 80025a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	220f      	movs	r2, #15
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a40      	ldr	r2, [pc, #256]	@ (80026c8 <HAL_GPIO_Init+0x2c0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d013      	beq.n	80025f4 <HAL_GPIO_Init+0x1ec>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a3f      	ldr	r2, [pc, #252]	@ (80026cc <HAL_GPIO_Init+0x2c4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00d      	beq.n	80025f0 <HAL_GPIO_Init+0x1e8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a3e      	ldr	r2, [pc, #248]	@ (80026d0 <HAL_GPIO_Init+0x2c8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d007      	beq.n	80025ec <HAL_GPIO_Init+0x1e4>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a3d      	ldr	r2, [pc, #244]	@ (80026d4 <HAL_GPIO_Init+0x2cc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d101      	bne.n	80025e8 <HAL_GPIO_Init+0x1e0>
 80025e4:	2303      	movs	r3, #3
 80025e6:	e006      	b.n	80025f6 <HAL_GPIO_Init+0x1ee>
 80025e8:	2304      	movs	r3, #4
 80025ea:	e004      	b.n	80025f6 <HAL_GPIO_Init+0x1ee>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e002      	b.n	80025f6 <HAL_GPIO_Init+0x1ee>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_GPIO_Init+0x1ee>
 80025f4:	2300      	movs	r3, #0
 80025f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025f8:	f002 0203 	and.w	r2, r2, #3
 80025fc:	0092      	lsls	r2, r2, #2
 80025fe:	4093      	lsls	r3, r2
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002606:	492f      	ldr	r1, [pc, #188]	@ (80026c4 <HAL_GPIO_Init+0x2bc>)
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d006      	beq.n	800262e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002620:	4b2d      	ldr	r3, [pc, #180]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	492c      	ldr	r1, [pc, #176]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	608b      	str	r3, [r1, #8]
 800262c:	e006      	b.n	800263c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800262e:	4b2a      	ldr	r3, [pc, #168]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	43db      	mvns	r3, r3
 8002636:	4928      	ldr	r1, [pc, #160]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002638:	4013      	ands	r3, r2
 800263a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d006      	beq.n	8002656 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002648:	4b23      	ldr	r3, [pc, #140]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	4922      	ldr	r1, [pc, #136]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	60cb      	str	r3, [r1, #12]
 8002654:	e006      	b.n	8002664 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002656:	4b20      	ldr	r3, [pc, #128]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	43db      	mvns	r3, r3
 800265e:	491e      	ldr	r1, [pc, #120]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002660:	4013      	ands	r3, r2
 8002662:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d006      	beq.n	800267e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002670:	4b19      	ldr	r3, [pc, #100]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4918      	ldr	r1, [pc, #96]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800267e:	4b16      	ldr	r3, [pc, #88]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	43db      	mvns	r3, r3
 8002686:	4914      	ldr	r1, [pc, #80]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002688:	4013      	ands	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d021      	beq.n	80026dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002698:	4b0f      	ldr	r3, [pc, #60]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	490e      	ldr	r1, [pc, #56]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
 80026a4:	e021      	b.n	80026ea <HAL_GPIO_Init+0x2e2>
 80026a6:	bf00      	nop
 80026a8:	10320000 	.word	0x10320000
 80026ac:	10310000 	.word	0x10310000
 80026b0:	10220000 	.word	0x10220000
 80026b4:	10210000 	.word	0x10210000
 80026b8:	10120000 	.word	0x10120000
 80026bc:	10110000 	.word	0x10110000
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40010000 	.word	0x40010000
 80026c8:	40010800 	.word	0x40010800
 80026cc:	40010c00 	.word	0x40010c00
 80026d0:	40011000 	.word	0x40011000
 80026d4:	40011400 	.word	0x40011400
 80026d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <HAL_GPIO_Init+0x304>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	4909      	ldr	r1, [pc, #36]	@ (800270c <HAL_GPIO_Init+0x304>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	3301      	adds	r3, #1
 80026ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f47f ae8e 	bne.w	800241c <HAL_GPIO_Init+0x14>
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	372c      	adds	r7, #44	@ 0x2c
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	40010400 	.word	0x40010400

08002710 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800271a:	4b08      	ldr	r3, [pc, #32]	@ (800273c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d006      	beq.n	8002734 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002726:	4a05      	ldr	r2, [pc, #20]	@ (800273c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fcb2 	bl	8001098 <HAL_GPIO_EXTI_Callback>
  }
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40010400 	.word	0x40010400

08002740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e12b      	b.n	80029aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe ff6a 	bl	8001640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2224      	movs	r2, #36	@ 0x24
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0201 	bic.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002792:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027a4:	f001 f83e 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 80027a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4a81      	ldr	r2, [pc, #516]	@ (80029b4 <HAL_I2C_Init+0x274>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d807      	bhi.n	80027c4 <HAL_I2C_Init+0x84>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4a80      	ldr	r2, [pc, #512]	@ (80029b8 <HAL_I2C_Init+0x278>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	bf94      	ite	ls
 80027bc:	2301      	movls	r3, #1
 80027be:	2300      	movhi	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	e006      	b.n	80027d2 <HAL_I2C_Init+0x92>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a7d      	ldr	r2, [pc, #500]	@ (80029bc <HAL_I2C_Init+0x27c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	bf94      	ite	ls
 80027cc:	2301      	movls	r3, #1
 80027ce:	2300      	movhi	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0e7      	b.n	80029aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4a78      	ldr	r2, [pc, #480]	@ (80029c0 <HAL_I2C_Init+0x280>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	0c9b      	lsrs	r3, r3, #18
 80027e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4a6a      	ldr	r2, [pc, #424]	@ (80029b4 <HAL_I2C_Init+0x274>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d802      	bhi.n	8002814 <HAL_I2C_Init+0xd4>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	3301      	adds	r3, #1
 8002812:	e009      	b.n	8002828 <HAL_I2C_Init+0xe8>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	4a69      	ldr	r2, [pc, #420]	@ (80029c4 <HAL_I2C_Init+0x284>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	099b      	lsrs	r3, r3, #6
 8002826:	3301      	adds	r3, #1
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	430b      	orrs	r3, r1
 800282e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800283a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	495c      	ldr	r1, [pc, #368]	@ (80029b4 <HAL_I2C_Init+0x274>)
 8002844:	428b      	cmp	r3, r1
 8002846:	d819      	bhi.n	800287c <HAL_I2C_Init+0x13c>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1e59      	subs	r1, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	fbb1 f3f3 	udiv	r3, r1, r3
 8002856:	1c59      	adds	r1, r3, #1
 8002858:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800285c:	400b      	ands	r3, r1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_I2C_Init+0x138>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1e59      	subs	r1, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002870:	3301      	adds	r3, #1
 8002872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002876:	e051      	b.n	800291c <HAL_I2C_Init+0x1dc>
 8002878:	2304      	movs	r3, #4
 800287a:	e04f      	b.n	800291c <HAL_I2C_Init+0x1dc>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d111      	bne.n	80028a8 <HAL_I2C_Init+0x168>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1e58      	subs	r0, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	440b      	add	r3, r1
 8002892:	fbb0 f3f3 	udiv	r3, r0, r3
 8002896:	3301      	adds	r3, #1
 8002898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	e012      	b.n	80028ce <HAL_I2C_Init+0x18e>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e58      	subs	r0, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	0099      	lsls	r1, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_I2C_Init+0x196>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e022      	b.n	800291c <HAL_I2C_Init+0x1dc>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10e      	bne.n	80028fc <HAL_I2C_Init+0x1bc>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1e58      	subs	r0, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	440b      	add	r3, r1
 80028ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f0:	3301      	adds	r3, #1
 80028f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028fa:	e00f      	b.n	800291c <HAL_I2C_Init+0x1dc>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1e58      	subs	r0, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	0099      	lsls	r1, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002912:	3301      	adds	r3, #1
 8002914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002918:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	6809      	ldr	r1, [r1, #0]
 8002920:	4313      	orrs	r3, r2
 8002922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69da      	ldr	r2, [r3, #28]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800294a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6911      	ldr	r1, [r2, #16]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68d2      	ldr	r2, [r2, #12]
 8002956:	4311      	orrs	r1, r2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	430b      	orrs	r3, r1
 800295e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	000186a0 	.word	0x000186a0
 80029b8:	001e847f 	.word	0x001e847f
 80029bc:	003d08ff 	.word	0x003d08ff
 80029c0:	431bde83 	.word	0x431bde83
 80029c4:	10624dd3 	.word	0x10624dd3

080029c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	461a      	mov	r2, r3
 80029d4:	460b      	mov	r3, r1
 80029d6:	817b      	strh	r3, [r7, #10]
 80029d8:	4613      	mov	r3, r2
 80029da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029dc:	f7fe ff80 	bl	80018e0 <HAL_GetTick>
 80029e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	f040 80e0 	bne.w	8002bb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	2319      	movs	r3, #25
 80029f6:	2201      	movs	r2, #1
 80029f8:	4970      	ldr	r1, [pc, #448]	@ (8002bbc <HAL_I2C_Master_Transmit+0x1f4>)
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f964 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a06:	2302      	movs	r3, #2
 8002a08:	e0d3      	b.n	8002bb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_I2C_Master_Transmit+0x50>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e0cc      	b.n	8002bb2 <HAL_I2C_Master_Transmit+0x1ea>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d007      	beq.n	8002a3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2221      	movs	r2, #33	@ 0x21
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2210      	movs	r2, #16
 8002a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	893a      	ldrh	r2, [r7, #8]
 8002a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4a50      	ldr	r2, [pc, #320]	@ (8002bc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a80:	8979      	ldrh	r1, [r7, #10]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	6a3a      	ldr	r2, [r7, #32]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f89c 	bl	8002bc4 <I2C_MasterRequestWrite>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e08d      	b.n	8002bb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002aac:	e066      	b.n	8002b7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	6a39      	ldr	r1, [r7, #32]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fa22 	bl	8002efc <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00d      	beq.n	8002ada <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d107      	bne.n	8002ad6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e06b      	b.n	8002bb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d11b      	bne.n	8002b50 <HAL_I2C_Master_Transmit+0x188>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d017      	beq.n	8002b50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	781a      	ldrb	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	6a39      	ldr	r1, [r7, #32]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 fa19 	bl	8002f8c <I2C_WaitOnBTFFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00d      	beq.n	8002b7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d107      	bne.n	8002b78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e01a      	b.n	8002bb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d194      	bne.n	8002aae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e000      	b.n	8002bb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
  }
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	00100002 	.word	0x00100002
 8002bc0:	ffff0000 	.word	0xffff0000

08002bc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d006      	beq.n	8002bee <I2C_MasterRequestWrite+0x2a>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d003      	beq.n	8002bee <I2C_MasterRequestWrite+0x2a>
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bec:	d108      	bne.n	8002c00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	e00b      	b.n	8002c18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c04:	2b12      	cmp	r3, #18
 8002c06:	d107      	bne.n	8002c18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f84f 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00d      	beq.n	8002c4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c3e:	d103      	bne.n	8002c48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e035      	b.n	8002cb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c54:	d108      	bne.n	8002c68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c56:	897b      	ldrh	r3, [r7, #10]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c64:	611a      	str	r2, [r3, #16]
 8002c66:	e01b      	b.n	8002ca0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c68:	897b      	ldrh	r3, [r7, #10]
 8002c6a:	11db      	asrs	r3, r3, #7
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f003 0306 	and.w	r3, r3, #6
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	f063 030f 	orn	r3, r3, #15
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	490e      	ldr	r1, [pc, #56]	@ (8002cc0 <I2C_MasterRequestWrite+0xfc>)
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f898 	bl	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e010      	b.n	8002cb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c96:	897b      	ldrh	r3, [r7, #10]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	4907      	ldr	r1, [pc, #28]	@ (8002cc4 <I2C_MasterRequestWrite+0x100>)
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f888 	bl	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	00010008 	.word	0x00010008
 8002cc4:	00010002 	.word	0x00010002

08002cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd8:	e048      	b.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d044      	beq.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce2:	f7fe fdfd 	bl	80018e0 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d302      	bcc.n	8002cf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d139      	bne.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	0c1b      	lsrs	r3, r3, #16
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d10d      	bne.n	8002d1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	e00c      	b.n	8002d38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	43da      	mvns	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d116      	bne.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d58:	f043 0220 	orr.w	r2, r3, #32
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e023      	b.n	8002db4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	0c1b      	lsrs	r3, r3, #16
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d10d      	bne.n	8002d92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	43da      	mvns	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4013      	ands	r3, r2
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	e00c      	b.n	8002dac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	43da      	mvns	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d093      	beq.n	8002cda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dca:	e071      	b.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dda:	d123      	bne.n	8002e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002df4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	f043 0204 	orr.w	r2, r3, #4
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e067      	b.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2a:	d041      	beq.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2c:	f7fe fd58 	bl	80018e0 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d302      	bcc.n	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d136      	bne.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d10c      	bne.n	8002e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4013      	ands	r3, r2
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	bf14      	ite	ne
 8002e5e:	2301      	movne	r3, #1
 8002e60:	2300      	moveq	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	e00b      	b.n	8002e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	43da      	mvns	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4013      	ands	r3, r2
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf14      	ite	ne
 8002e78:	2301      	movne	r3, #1
 8002e7a:	2300      	moveq	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d016      	beq.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9c:	f043 0220 	orr.w	r2, r3, #32
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e021      	b.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	0c1b      	lsrs	r3, r3, #16
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d10c      	bne.n	8002ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	43da      	mvns	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	e00b      	b.n	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	43da      	mvns	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bf14      	ite	ne
 8002ee6:	2301      	movne	r3, #1
 8002ee8:	2300      	moveq	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f47f af6d 	bne.w	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f08:	e034      	b.n	8002f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f886 	bl	800301c <I2C_IsAcknowledgeFailed>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e034      	b.n	8002f84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d028      	beq.n	8002f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7fe fcdd 	bl	80018e0 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11d      	bne.n	8002f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f42:	2b80      	cmp	r3, #128	@ 0x80
 8002f44:	d016      	beq.n	8002f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e007      	b.n	8002f84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7e:	2b80      	cmp	r3, #128	@ 0x80
 8002f80:	d1c3      	bne.n	8002f0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f98:	e034      	b.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f83e 	bl	800301c <I2C_IsAcknowledgeFailed>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e034      	b.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d028      	beq.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb2:	f7fe fc95 	bl	80018e0 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d302      	bcc.n	8002fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d11d      	bne.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d016      	beq.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e007      	b.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d1c3      	bne.n	8002f9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003032:	d11b      	bne.n	800306c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800303c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003058:	f043 0204 	orr.w	r2, r3, #4
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800307c:	4b03      	ldr	r3, [pc, #12]	@ (800308c <HAL_PWR_EnableBkUpAccess+0x14>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]
}
 8003082:	bf00      	nop
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	420e0020 	.word	0x420e0020

08003090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e272      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8087 	beq.w	80031be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030b0:	4b92      	ldr	r3, [pc, #584]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d00c      	beq.n	80030d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030bc:	4b8f      	ldr	r3, [pc, #572]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d112      	bne.n	80030ee <HAL_RCC_OscConfig+0x5e>
 80030c8:	4b8c      	ldr	r3, [pc, #560]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d4:	d10b      	bne.n	80030ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d6:	4b89      	ldr	r3, [pc, #548]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d06c      	beq.n	80031bc <HAL_RCC_OscConfig+0x12c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d168      	bne.n	80031bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e24c      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_OscConfig+0x76>
 80030f8:	4b80      	ldr	r3, [pc, #512]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a7f      	ldr	r2, [pc, #508]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	e02e      	b.n	8003164 <HAL_RCC_OscConfig+0xd4>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x98>
 800310e:	4b7b      	ldr	r3, [pc, #492]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a7a      	ldr	r2, [pc, #488]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	4b78      	ldr	r3, [pc, #480]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a77      	ldr	r2, [pc, #476]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003120:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e01d      	b.n	8003164 <HAL_RCC_OscConfig+0xd4>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0xbc>
 8003132:	4b72      	ldr	r3, [pc, #456]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a71      	ldr	r2, [pc, #452]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003138:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	4b6f      	ldr	r3, [pc, #444]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a6e      	ldr	r2, [pc, #440]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e00b      	b.n	8003164 <HAL_RCC_OscConfig+0xd4>
 800314c:	4b6b      	ldr	r3, [pc, #428]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a6a      	ldr	r2, [pc, #424]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	4b68      	ldr	r3, [pc, #416]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a67      	ldr	r2, [pc, #412]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 800315e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003162:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fe fbb8 	bl	80018e0 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003174:	f7fe fbb4 	bl	80018e0 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	@ 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e200      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b5d      	ldr	r3, [pc, #372]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0xe4>
 8003192:	e014      	b.n	80031be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7fe fba4 	bl	80018e0 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800319c:	f7fe fba0 	bl	80018e0 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	@ 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e1ec      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ae:	4b53      	ldr	r3, [pc, #332]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x10c>
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d063      	beq.n	8003292 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ca:	4b4c      	ldr	r3, [pc, #304]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031d6:	4b49      	ldr	r3, [pc, #292]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d11c      	bne.n	800321c <HAL_RCC_OscConfig+0x18c>
 80031e2:	4b46      	ldr	r3, [pc, #280]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d116      	bne.n	800321c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	4b43      	ldr	r3, [pc, #268]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_RCC_OscConfig+0x176>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d001      	beq.n	8003206 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e1c0      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003206:	4b3d      	ldr	r3, [pc, #244]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4939      	ldr	r1, [pc, #228]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	e03a      	b.n	8003292 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003224:	4b36      	ldr	r3, [pc, #216]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe fb59 	bl	80018e0 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003232:	f7fe fb55 	bl	80018e0 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e1a1      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003244:	4b2d      	ldr	r3, [pc, #180]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003250:	4b2a      	ldr	r3, [pc, #168]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4927      	ldr	r1, [pc, #156]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]
 8003264:	e015      	b.n	8003292 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003266:	4b26      	ldr	r3, [pc, #152]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe fb38 	bl	80018e0 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003274:	f7fe fb34 	bl	80018e0 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e180      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	4b1d      	ldr	r3, [pc, #116]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d03a      	beq.n	8003314 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d019      	beq.n	80032da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a6:	4b17      	ldr	r3, [pc, #92]	@ (8003304 <HAL_RCC_OscConfig+0x274>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ac:	f7fe fb18 	bl	80018e0 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b4:	f7fe fb14 	bl	80018e0 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e160      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c6:	4b0d      	ldr	r3, [pc, #52]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032d2:	2001      	movs	r0, #1
 80032d4:	f000 face 	bl	8003874 <RCC_Delay>
 80032d8:	e01c      	b.n	8003314 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032da:	4b0a      	ldr	r3, [pc, #40]	@ (8003304 <HAL_RCC_OscConfig+0x274>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e0:	f7fe fafe 	bl	80018e0 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e6:	e00f      	b.n	8003308 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e8:	f7fe fafa 	bl	80018e0 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d908      	bls.n	8003308 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e146      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	42420000 	.word	0x42420000
 8003304:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	4b92      	ldr	r3, [pc, #584]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e9      	bne.n	80032e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80a6 	beq.w	800346e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003326:	4b8b      	ldr	r3, [pc, #556]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10d      	bne.n	800334e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	4b88      	ldr	r3, [pc, #544]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	4a87      	ldr	r2, [pc, #540]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800333c:	61d3      	str	r3, [r2, #28]
 800333e:	4b85      	ldr	r3, [pc, #532]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334a:	2301      	movs	r3, #1
 800334c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334e:	4b82      	ldr	r3, [pc, #520]	@ (8003558 <HAL_RCC_OscConfig+0x4c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003356:	2b00      	cmp	r3, #0
 8003358:	d118      	bne.n	800338c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335a:	4b7f      	ldr	r3, [pc, #508]	@ (8003558 <HAL_RCC_OscConfig+0x4c8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a7e      	ldr	r2, [pc, #504]	@ (8003558 <HAL_RCC_OscConfig+0x4c8>)
 8003360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003366:	f7fe fabb 	bl	80018e0 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336e:	f7fe fab7 	bl	80018e0 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b64      	cmp	r3, #100	@ 0x64
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e103      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	4b75      	ldr	r3, [pc, #468]	@ (8003558 <HAL_RCC_OscConfig+0x4c8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d106      	bne.n	80033a2 <HAL_RCC_OscConfig+0x312>
 8003394:	4b6f      	ldr	r3, [pc, #444]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	4a6e      	ldr	r2, [pc, #440]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6213      	str	r3, [r2, #32]
 80033a0:	e02d      	b.n	80033fe <HAL_RCC_OscConfig+0x36e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x334>
 80033aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	4a69      	ldr	r2, [pc, #420]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	6213      	str	r3, [r2, #32]
 80033b6:	4b67      	ldr	r3, [pc, #412]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	4a66      	ldr	r2, [pc, #408]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	f023 0304 	bic.w	r3, r3, #4
 80033c0:	6213      	str	r3, [r2, #32]
 80033c2:	e01c      	b.n	80033fe <HAL_RCC_OscConfig+0x36e>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b05      	cmp	r3, #5
 80033ca:	d10c      	bne.n	80033e6 <HAL_RCC_OscConfig+0x356>
 80033cc:	4b61      	ldr	r3, [pc, #388]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	4a60      	ldr	r2, [pc, #384]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033d2:	f043 0304 	orr.w	r3, r3, #4
 80033d6:	6213      	str	r3, [r2, #32]
 80033d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4a5d      	ldr	r2, [pc, #372]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6213      	str	r3, [r2, #32]
 80033e4:	e00b      	b.n	80033fe <HAL_RCC_OscConfig+0x36e>
 80033e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4a5a      	ldr	r2, [pc, #360]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	6213      	str	r3, [r2, #32]
 80033f2:	4b58      	ldr	r3, [pc, #352]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4a57      	ldr	r2, [pc, #348]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	f023 0304 	bic.w	r3, r3, #4
 80033fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d015      	beq.n	8003432 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003406:	f7fe fa6b 	bl	80018e0 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340c:	e00a      	b.n	8003424 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fe fa67 	bl	80018e0 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0b1      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003424:	4b4b      	ldr	r3, [pc, #300]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ee      	beq.n	800340e <HAL_RCC_OscConfig+0x37e>
 8003430:	e014      	b.n	800345c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003432:	f7fe fa55 	bl	80018e0 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003438:	e00a      	b.n	8003450 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343a:	f7fe fa51 	bl	80018e0 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003448:	4293      	cmp	r3, r2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e09b      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003450:	4b40      	ldr	r3, [pc, #256]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ee      	bne.n	800343a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800345c:	7dfb      	ldrb	r3, [r7, #23]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003462:	4b3c      	ldr	r3, [pc, #240]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	4a3b      	ldr	r2, [pc, #236]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800346c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8087 	beq.w	8003586 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003478:	4b36      	ldr	r3, [pc, #216]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b08      	cmp	r3, #8
 8003482:	d061      	beq.n	8003548 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d146      	bne.n	800351a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348c:	4b33      	ldr	r3, [pc, #204]	@ (800355c <HAL_RCC_OscConfig+0x4cc>)
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003492:	f7fe fa25 	bl	80018e0 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349a:	f7fe fa21 	bl	80018e0 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e06d      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ac:	4b29      	ldr	r3, [pc, #164]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f0      	bne.n	800349a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c0:	d108      	bne.n	80034d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034c2:	4b24      	ldr	r3, [pc, #144]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	4921      	ldr	r1, [pc, #132]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a19      	ldr	r1, [r3, #32]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	430b      	orrs	r3, r1
 80034e6:	491b      	ldr	r1, [pc, #108]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ec:	4b1b      	ldr	r3, [pc, #108]	@ (800355c <HAL_RCC_OscConfig+0x4cc>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f2:	f7fe f9f5 	bl	80018e0 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fa:	f7fe f9f1 	bl	80018e0 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e03d      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800350c:	4b11      	ldr	r3, [pc, #68]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x46a>
 8003518:	e035      	b.n	8003586 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351a:	4b10      	ldr	r3, [pc, #64]	@ (800355c <HAL_RCC_OscConfig+0x4cc>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fe f9de 	bl	80018e0 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003528:	f7fe f9da 	bl	80018e0 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e026      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800353a:	4b06      	ldr	r3, [pc, #24]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x498>
 8003546:	e01e      	b.n	8003586 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d107      	bne.n	8003560 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e019      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
 8003554:	40021000 	.word	0x40021000
 8003558:	40007000 	.word	0x40007000
 800355c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <HAL_RCC_OscConfig+0x500>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	429a      	cmp	r2, r3
 8003572:	d106      	bne.n	8003582 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d001      	beq.n	8003586 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000

08003594 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0d0      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d910      	bls.n	80035d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b67      	ldr	r3, [pc, #412]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 0207 	bic.w	r2, r3, #7
 80035be:	4965      	ldr	r1, [pc, #404]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b63      	ldr	r3, [pc, #396]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0b8      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d020      	beq.n	8003626 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f0:	4b59      	ldr	r3, [pc, #356]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	4a58      	ldr	r2, [pc, #352]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80035f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003608:	4b53      	ldr	r3, [pc, #332]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	4a52      	ldr	r2, [pc, #328]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003612:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003614:	4b50      	ldr	r3, [pc, #320]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	494d      	ldr	r1, [pc, #308]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d040      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	4b47      	ldr	r3, [pc, #284]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d115      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e07f      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4b41      	ldr	r3, [pc, #260]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e073      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003662:	4b3d      	ldr	r3, [pc, #244]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06b      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003672:	4b39      	ldr	r3, [pc, #228]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f023 0203 	bic.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4936      	ldr	r1, [pc, #216]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	4313      	orrs	r3, r2
 8003682:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003684:	f7fe f92c 	bl	80018e0 <HAL_GetTick>
 8003688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368c:	f7fe f928 	bl	80018e0 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e053      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 020c 	and.w	r2, r3, #12
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1eb      	bne.n	800368c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036b4:	4b27      	ldr	r3, [pc, #156]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d210      	bcs.n	80036e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b24      	ldr	r3, [pc, #144]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 0207 	bic.w	r2, r3, #7
 80036ca:	4922      	ldr	r1, [pc, #136]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	4b20      	ldr	r3, [pc, #128]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e032      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f0:	4b19      	ldr	r3, [pc, #100]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4916      	ldr	r1, [pc, #88]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800370e:	4b12      	ldr	r3, [pc, #72]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	490e      	ldr	r1, [pc, #56]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003722:	f000 f821 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8003726:	4602      	mov	r2, r0
 8003728:	4b0b      	ldr	r3, [pc, #44]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	490a      	ldr	r1, [pc, #40]	@ (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003734:	5ccb      	ldrb	r3, [r1, r3]
 8003736:	fa22 f303 	lsr.w	r3, r2, r3
 800373a:	4a09      	ldr	r2, [pc, #36]	@ (8003760 <HAL_RCC_ClockConfig+0x1cc>)
 800373c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800373e:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <HAL_RCC_ClockConfig+0x1d0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe f88a 	bl	800185c <HAL_InitTick>

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40022000 	.word	0x40022000
 8003758:	40021000 	.word	0x40021000
 800375c:	080050a4 	.word	0x080050a4
 8003760:	20000014 	.word	0x20000014
 8003764:	20000018 	.word	0x20000018

08003768 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	2300      	movs	r3, #0
 800377c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003782:	4b1e      	ldr	r3, [pc, #120]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x94>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b04      	cmp	r3, #4
 8003790:	d002      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x30>
 8003792:	2b08      	cmp	r3, #8
 8003794:	d003      	beq.n	800379e <HAL_RCC_GetSysClockFreq+0x36>
 8003796:	e027      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003798:	4b19      	ldr	r3, [pc, #100]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x98>)
 800379a:	613b      	str	r3, [r7, #16]
      break;
 800379c:	e027      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	0c9b      	lsrs	r3, r3, #18
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	4a17      	ldr	r2, [pc, #92]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037a8:	5cd3      	ldrb	r3, [r2, r3]
 80037aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d010      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037b6:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x94>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	0c5b      	lsrs	r3, r3, #17
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	4a11      	ldr	r2, [pc, #68]	@ (8003808 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037c2:	5cd3      	ldrb	r3, [r2, r3]
 80037c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ca:	fb03 f202 	mul.w	r2, r3, r2
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	e004      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a0c      	ldr	r2, [pc, #48]	@ (800380c <HAL_RCC_GetSysClockFreq+0xa4>)
 80037dc:	fb02 f303 	mul.w	r3, r2, r3
 80037e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	613b      	str	r3, [r7, #16]
      break;
 80037e6:	e002      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037e8:	4b05      	ldr	r3, [pc, #20]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ea:	613b      	str	r3, [r7, #16]
      break;
 80037ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ee:	693b      	ldr	r3, [r7, #16]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000
 8003800:	007a1200 	.word	0x007a1200
 8003804:	080050bc 	.word	0x080050bc
 8003808:	080050cc 	.word	0x080050cc
 800380c:	003d0900 	.word	0x003d0900

08003810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003814:	4b02      	ldr	r3, [pc, #8]	@ (8003820 <HAL_RCC_GetHCLKFreq+0x10>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	20000014 	.word	0x20000014

08003824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003828:	f7ff fff2 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	0a1b      	lsrs	r3, r3, #8
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	4903      	ldr	r1, [pc, #12]	@ (8003848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	080050b4 	.word	0x080050b4

0800384c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003850:	f7ff ffde 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b05      	ldr	r3, [pc, #20]	@ (800386c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	0adb      	lsrs	r3, r3, #11
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	4903      	ldr	r1, [pc, #12]	@ (8003870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003868:	4618      	mov	r0, r3
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40021000 	.word	0x40021000
 8003870:	080050b4 	.word	0x080050b4

08003874 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800387c:	4b0a      	ldr	r3, [pc, #40]	@ (80038a8 <RCC_Delay+0x34>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a0a      	ldr	r2, [pc, #40]	@ (80038ac <RCC_Delay+0x38>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	0a5b      	lsrs	r3, r3, #9
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003890:	bf00      	nop
  }
  while (Delay --);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1e5a      	subs	r2, r3, #1
 8003896:	60fa      	str	r2, [r7, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f9      	bne.n	8003890 <RCC_Delay+0x1c>
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	20000014 	.word	0x20000014
 80038ac:	10624dd3 	.word	0x10624dd3

080038b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d07d      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80038cc:	2300      	movs	r3, #0
 80038ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d0:	4b4f      	ldr	r3, [pc, #316]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10d      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038dc:	4b4c      	ldr	r3, [pc, #304]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038e6:	61d3      	str	r3, [r2, #28]
 80038e8:	4b49      	ldr	r3, [pc, #292]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f4:	2301      	movs	r3, #1
 80038f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f8:	4b46      	ldr	r3, [pc, #280]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d118      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003904:	4b43      	ldr	r3, [pc, #268]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a42      	ldr	r2, [pc, #264]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800390a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800390e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003910:	f7fd ffe6 	bl	80018e0 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003916:	e008      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003918:	f7fd ffe2 	bl	80018e0 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	@ 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e06d      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392a:	4b3a      	ldr	r3, [pc, #232]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003936:	4b36      	ldr	r3, [pc, #216]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800393e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d02e      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	429a      	cmp	r2, r3
 8003952:	d027      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003954:	4b2e      	ldr	r3, [pc, #184]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800395c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800395e:	4b2e      	ldr	r3, [pc, #184]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003964:	4b2c      	ldr	r3, [pc, #176]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800396a:	4a29      	ldr	r2, [pc, #164]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d014      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397a:	f7fd ffb1 	bl	80018e0 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003980:	e00a      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003982:	f7fd ffad 	bl	80018e0 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003990:	4293      	cmp	r3, r2
 8003992:	d901      	bls.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e036      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003998:	4b1d      	ldr	r3, [pc, #116]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0ee      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4917      	ldr	r1, [pc, #92]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039b6:	7dfb      	ldrb	r3, [r7, #23]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d105      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039bc:	4b14      	ldr	r3, [pc, #80]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	4a13      	ldr	r2, [pc, #76]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	490b      	ldr	r1, [pc, #44]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039f2:	4b07      	ldr	r3, [pc, #28]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	4904      	ldr	r1, [pc, #16]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40007000 	.word	0x40007000
 8003a18:	42420440 	.word	0x42420440

08003a1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b10      	cmp	r3, #16
 8003a3c:	d00a      	beq.n	8003a54 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b10      	cmp	r3, #16
 8003a42:	f200 808a 	bhi.w	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d045      	beq.n	8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d075      	beq.n	8003b3e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003a52:	e082      	b.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003a54:	4b46      	ldr	r3, [pc, #280]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003a5a:	4b45      	ldr	r3, [pc, #276]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d07b      	beq.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	0c9b      	lsrs	r3, r3, #18
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	4a41      	ldr	r2, [pc, #260]	@ (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003a70:	5cd3      	ldrb	r3, [r2, r3]
 8003a72:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d015      	beq.n	8003aaa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	0c5b      	lsrs	r3, r3, #17
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	4a3b      	ldr	r2, [pc, #236]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003a8a:	5cd3      	ldrb	r3, [r2, r3]
 8003a8c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a98:	4a38      	ldr	r2, [pc, #224]	@ (8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	e004      	b.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4a34      	ldr	r2, [pc, #208]	@ (8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
 8003ab2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003abc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ac0:	d102      	bne.n	8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	61bb      	str	r3, [r7, #24]
      break;
 8003ac6:	e04a      	b.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	4a2d      	ldr	r2, [pc, #180]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	085b      	lsrs	r3, r3, #1
 8003ad4:	61bb      	str	r3, [r7, #24]
      break;
 8003ad6:	e042      	b.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003ad8:	4b25      	ldr	r3, [pc, #148]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ae8:	d108      	bne.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003af4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	e01f      	b.n	8003b3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b06:	d109      	bne.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003b08:	4b19      	ldr	r3, [pc, #100]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003b14:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003b18:	61bb      	str	r3, [r7, #24]
 8003b1a:	e00f      	b.n	8003b3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b26:	d11c      	bne.n	8003b62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003b28:	4b11      	ldr	r3, [pc, #68]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d016      	beq.n	8003b62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003b34:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003b38:	61bb      	str	r3, [r7, #24]
      break;
 8003b3a:	e012      	b.n	8003b62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003b3c:	e011      	b.n	8003b62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003b3e:	f7ff fe85 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8003b42:	4602      	mov	r2, r0
 8003b44:	4b0a      	ldr	r3, [pc, #40]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	0b9b      	lsrs	r3, r3, #14
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	3301      	adds	r3, #1
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b56:	61bb      	str	r3, [r7, #24]
      break;
 8003b58:	e004      	b.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b5a:	bf00      	nop
 8003b5c:	e002      	b.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b5e:	bf00      	nop
 8003b60:	e000      	b.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b62:	bf00      	nop
    }
  }
  return (frequency);
 8003b64:	69bb      	ldr	r3, [r7, #24]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000
 8003b74:	080050d0 	.word	0x080050d0
 8003b78:	080050e0 	.word	0x080050e0
 8003b7c:	007a1200 	.word	0x007a1200
 8003b80:	003d0900 	.word	0x003d0900
 8003b84:	aaaaaaab 	.word	0xaaaaaaab

08003b88 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e07a      	b.n	8003c94 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	7c5b      	ldrb	r3, [r3, #17]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fd fd84 	bl	80016bc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 faea 	bl	8004194 <HAL_RTC_WaitForSynchro>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d004      	beq.n	8003bd0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2204      	movs	r2, #4
 8003bca:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e061      	b.n	8003c94 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fba3 	bl	800431c <RTC_EnterInitMode>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d004      	beq.n	8003be6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2204      	movs	r2, #4
 8003be0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e056      	b.n	8003c94 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0207 	bic.w	r2, r2, #7
 8003bf4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003bfe:	4b27      	ldr	r3, [pc, #156]	@ (8003c9c <HAL_RTC_Init+0x114>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c02:	4a26      	ldr	r2, [pc, #152]	@ (8003c9c <HAL_RTC_Init+0x114>)
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003c0a:	4b24      	ldr	r3, [pc, #144]	@ (8003c9c <HAL_RTC_Init+0x114>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	4921      	ldr	r1, [pc, #132]	@ (8003c9c <HAL_RTC_Init+0x114>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d003      	beq.n	8003c2e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	e00e      	b.n	8003c4c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f7ff fef4 	bl	8003a1c <HAL_RCCEx_GetPeriphCLKFreq>
 8003c34:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d104      	bne.n	8003c46 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2204      	movs	r2, #4
 8003c40:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e026      	b.n	8003c94 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	0c1a      	lsrs	r2, r3, #16
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f002 020f 	and.w	r2, r2, #15
 8003c58:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	b292      	uxth	r2, r2
 8003c62:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fb81 	bl	800436c <RTC_ExitInitMode>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d004      	beq.n	8003c7a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2204      	movs	r2, #4
 8003c74:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e00c      	b.n	8003c94 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003c92:	2300      	movs	r3, #0
  }
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40006c00 	.word	0x40006c00

08003ca0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <HAL_RTC_SetTime+0x20>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e080      	b.n	8003dc6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	7c1b      	ldrb	r3, [r3, #16]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_RTC_SetTime+0x30>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e07a      	b.n	8003dc6 <HAL_RTC_SetTime+0x126>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d113      	bne.n	8003d0a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003cec:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	785b      	ldrb	r3, [r3, #1]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	1a5b      	subs	r3, r3, r1
 8003cfc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003cfe:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003d04:	4413      	add	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e01e      	b.n	8003d48 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fb71 	bl	80043f6 <RTC_Bcd2ToByte>
 8003d14:	4603      	mov	r3, r0
 8003d16:	461a      	mov	r2, r3
 8003d18:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003d1c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	785b      	ldrb	r3, [r3, #1]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fb66 	bl	80043f6 <RTC_Bcd2ToByte>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003d36:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	789b      	ldrb	r3, [r3, #2]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fb5a 	bl	80043f6 <RTC_Bcd2ToByte>
 8003d42:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003d44:	4423      	add	r3, r4
 8003d46:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003d48:	6979      	ldr	r1, [r7, #20]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 fa7f 	bl	800424e <RTC_WriteTimeCounter>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d007      	beq.n	8003d66 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2204      	movs	r2, #4
 8003d5a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e02f      	b.n	8003dc6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0205 	bic.w	r2, r2, #5
 8003d74:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fa90 	bl	800429c <RTC_ReadAlarmCounter>
 8003d7c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d84:	d018      	beq.n	8003db8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d214      	bcs.n	8003db8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003d94:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003d98:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003d9a:	6939      	ldr	r1, [r7, #16]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 fa96 	bl	80042ce <RTC_WriteAlarmCounter>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2204      	movs	r2, #4
 8003dac:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e006      	b.n	8003dc6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
  }
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd90      	pop	{r4, r7, pc}
	...

08003dd0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61bb      	str	r3, [r7, #24]
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_RTC_GetTime+0x28>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0b5      	b.n	8003f68 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e0ac      	b.n	8003f68 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f9ed 	bl	80041ee <RTC_ReadTimeCounter>
 8003e14:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	4a55      	ldr	r2, [pc, #340]	@ (8003f70 <HAL_RTC_GetTime+0x1a0>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	0adb      	lsrs	r3, r3, #11
 8003e20:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4b52      	ldr	r3, [pc, #328]	@ (8003f70 <HAL_RTC_GetTime+0x1a0>)
 8003e26:	fba3 1302 	umull	r1, r3, r3, r2
 8003e2a:	0adb      	lsrs	r3, r3, #11
 8003e2c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003e30:	fb01 f303 	mul.w	r3, r1, r3
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	4a4f      	ldr	r2, [pc, #316]	@ (8003f74 <HAL_RTC_GetTime+0x1a4>)
 8003e38:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	4a4a      	ldr	r2, [pc, #296]	@ (8003f70 <HAL_RTC_GetTime+0x1a0>)
 8003e48:	fba2 1203 	umull	r1, r2, r2, r3
 8003e4c:	0ad2      	lsrs	r2, r2, #11
 8003e4e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003e52:	fb01 f202 	mul.w	r2, r1, r2
 8003e56:	1a9a      	subs	r2, r3, r2
 8003e58:	4b46      	ldr	r3, [pc, #280]	@ (8003f74 <HAL_RTC_GetTime+0x1a4>)
 8003e5a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e5e:	0959      	lsrs	r1, r3, #5
 8003e60:	460b      	mov	r3, r1
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a5b      	subs	r3, r3, r1
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	1ad1      	subs	r1, r2, r3
 8003e6a:	b2ca      	uxtb	r2, r1
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	2b17      	cmp	r3, #23
 8003e74:	d955      	bls.n	8003f22 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4a3f      	ldr	r2, [pc, #252]	@ (8003f78 <HAL_RTC_GetTime+0x1a8>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003e82:	6939      	ldr	r1, [r7, #16]
 8003e84:	4b3c      	ldr	r3, [pc, #240]	@ (8003f78 <HAL_RTC_GetTime+0x1a8>)
 8003e86:	fba3 2301 	umull	r2, r3, r3, r1
 8003e8a:	091a      	lsrs	r2, r3, #4
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	4413      	add	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	1aca      	subs	r2, r1, r3
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f9fd 	bl	800429c <RTC_ReadAlarmCounter>
 8003ea2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d008      	beq.n	8003ebe <HAL_RTC_GetTime+0xee>
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d904      	bls.n	8003ebe <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	e002      	b.n	8003ec4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	4a2d      	ldr	r2, [pc, #180]	@ (8003f7c <HAL_RTC_GetTime+0x1ac>)
 8003ec8:	fb02 f303 	mul.w	r3, r2, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003ed2:	69b9      	ldr	r1, [r7, #24]
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 f9ba 	bl	800424e <RTC_WriteTimeCounter>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e041      	b.n	8003f68 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eea:	d00c      	beq.n	8003f06 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003ef4:	69f9      	ldr	r1, [r7, #28]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f9e9 	bl	80042ce <RTC_WriteAlarmCounter>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e030      	b.n	8003f68 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003f06:	69f9      	ldr	r1, [r7, #28]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f9e0 	bl	80042ce <RTC_WriteAlarmCounter>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e027      	b.n	8003f68 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003f18:	6979      	ldr	r1, [r7, #20]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fa88 	bl	8004430 <RTC_DateUpdate>
 8003f20:	e003      	b.n	8003f2a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01a      	beq.n	8003f66 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fa41 	bl	80043bc <RTC_ByteToBcd2>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	785b      	ldrb	r3, [r3, #1]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fa38 	bl	80043bc <RTC_ByteToBcd2>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	789b      	ldrb	r3, [r3, #2]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fa2f 	bl	80043bc <RTC_ByteToBcd2>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	461a      	mov	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3720      	adds	r7, #32
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	91a2b3c5 	.word	0x91a2b3c5
 8003f74:	88888889 	.word	0x88888889
 8003f78:	aaaaaaab 	.word	0xaaaaaaab
 8003f7c:	00015180 	.word	0x00015180

08003f80 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	2300      	movs	r3, #0
 8003f92:	61bb      	str	r3, [r7, #24]
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_RTC_SetDate+0x24>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e097      	b.n	80040d8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	7c1b      	ldrb	r3, [r3, #16]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_RTC_SetDate+0x34>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e091      	b.n	80040d8 <HAL_RTC_SetDate+0x158>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	78da      	ldrb	r2, [r3, #3]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	785a      	ldrb	r2, [r3, #1]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	789a      	ldrb	r2, [r3, #2]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	739a      	strb	r2, [r3, #14]
 8003fde:	e01a      	b.n	8004016 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	78db      	ldrb	r3, [r3, #3]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fa06 	bl	80043f6 <RTC_Bcd2ToByte>
 8003fea:	4603      	mov	r3, r0
 8003fec:	461a      	mov	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	785b      	ldrb	r3, [r3, #1]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f9fd 	bl	80043f6 <RTC_Bcd2ToByte>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	461a      	mov	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	789b      	ldrb	r3, [r3, #2]
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f9f4 	bl	80043f6 <RTC_Bcd2ToByte>
 800400e:	4603      	mov	r3, r0
 8004010:	461a      	mov	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	7bdb      	ldrb	r3, [r3, #15]
 800401a:	4618      	mov	r0, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	7b59      	ldrb	r1, [r3, #13]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	7b9b      	ldrb	r3, [r3, #14]
 8004024:	461a      	mov	r2, r3
 8004026:	f000 fadf 	bl	80045e8 <RTC_WeekDayNum>
 800402a:	4603      	mov	r3, r0
 800402c:	461a      	mov	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	7b1a      	ldrb	r2, [r3, #12]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f8d7 	bl	80041ee <RTC_ReadTimeCounter>
 8004040:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4a26      	ldr	r2, [pc, #152]	@ (80040e0 <HAL_RTC_SetDate+0x160>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	0adb      	lsrs	r3, r3, #11
 800404c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b18      	cmp	r3, #24
 8004052:	d93a      	bls.n	80040ca <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	4a23      	ldr	r2, [pc, #140]	@ (80040e4 <HAL_RTC_SetDate+0x164>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	4a22      	ldr	r2, [pc, #136]	@ (80040e8 <HAL_RTC_SetDate+0x168>)
 8004060:	fb02 f303 	mul.w	r3, r2, r3
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800406a:	69f9      	ldr	r1, [r7, #28]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f8ee 	bl	800424e <RTC_WriteTimeCounter>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2204      	movs	r2, #4
 800407c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e027      	b.n	80040d8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f907 	bl	800429c <RTC_ReadAlarmCounter>
 800408e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004096:	d018      	beq.n	80040ca <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	429a      	cmp	r2, r3
 800409e:	d214      	bcs.n	80040ca <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80040a6:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80040aa:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80040ac:	69b9      	ldr	r1, [r7, #24]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f90d 	bl	80042ce <RTC_WriteAlarmCounter>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2204      	movs	r2, #4
 80040be:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e006      	b.n	80040d8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	91a2b3c5 	.word	0x91a2b3c5
 80040e4:	aaaaaaab 	.word	0xaaaaaaab
 80040e8:	00015180 	.word	0x00015180

080040ec <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	2100      	movs	r1, #0
 80040fe:	460a      	mov	r2, r1
 8004100:	801a      	strh	r2, [r3, #0]
 8004102:	460a      	mov	r2, r1
 8004104:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <HAL_RTC_GetDate+0x26>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e03a      	b.n	800418c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004116:	f107 0314 	add.w	r3, r7, #20
 800411a:	2200      	movs	r2, #0
 800411c:	4619      	mov	r1, r3
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f7ff fe56 	bl	8003dd0 <HAL_RTC_GetTime>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e02e      	b.n	800418c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	7b1a      	ldrb	r2, [r3, #12]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	7bda      	ldrb	r2, [r3, #15]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	7b5a      	ldrb	r2, [r3, #13]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	7b9a      	ldrb	r2, [r3, #14]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01a      	beq.n	800418a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	78db      	ldrb	r3, [r3, #3]
 8004158:	4618      	mov	r0, r3
 800415a:	f000 f92f 	bl	80043bc <RTC_ByteToBcd2>
 800415e:	4603      	mov	r3, r0
 8004160:	461a      	mov	r2, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	785b      	ldrb	r3, [r3, #1]
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f926 	bl	80043bc <RTC_ByteToBcd2>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	789b      	ldrb	r3, [r3, #2]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 f91d 	bl	80043bc <RTC_ByteToBcd2>
 8004182:	4603      	mov	r3, r0
 8004184:	461a      	mov	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e01d      	b.n	80041e6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0208 	bic.w	r2, r2, #8
 80041b8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80041ba:	f7fd fb91 	bl	80018e0 <HAL_GetTick>
 80041be:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80041c0:	e009      	b.n	80041d6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80041c2:	f7fd fb8d 	bl	80018e0 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041d0:	d901      	bls.n	80041d6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e007      	b.n	80041e6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ee      	beq.n	80041c2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b087      	sub	sp, #28
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	827b      	strh	r3, [r7, #18]
 80041fa:	2300      	movs	r3, #0
 80041fc:	823b      	strh	r3, [r7, #16]
 80041fe:	2300      	movs	r3, #0
 8004200:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800421e:	8a7a      	ldrh	r2, [r7, #18]
 8004220:	8a3b      	ldrh	r3, [r7, #16]
 8004222:	429a      	cmp	r2, r3
 8004224:	d008      	beq.n	8004238 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004226:	8a3b      	ldrh	r3, [r7, #16]
 8004228:	041a      	lsls	r2, r3, #16
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	b29b      	uxth	r3, r3
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	e004      	b.n	8004242 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004238:	8a7b      	ldrh	r3, [r7, #18]
 800423a:	041a      	lsls	r2, r3, #16
 800423c:	89fb      	ldrh	r3, [r7, #14]
 800423e:	4313      	orrs	r3, r2
 8004240:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004242:	697b      	ldr	r3, [r7, #20]
}
 8004244:	4618      	mov	r0, r3
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr

0800424e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f85d 	bl	800431c <RTC_EnterInitMode>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
 800426c:	e011      	b.n	8004292 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	0c12      	lsrs	r2, r2, #16
 8004276:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	b292      	uxth	r2, r2
 8004280:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f872 	bl	800436c <RTC_ExitInitMode>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004292:	7bfb      	ldrb	r3, [r7, #15]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	81fb      	strh	r3, [r7, #14]
 80042a8:	2300      	movs	r3, #0
 80042aa:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80042bc:	89fb      	ldrh	r3, [r7, #14]
 80042be:	041a      	lsls	r2, r3, #16
 80042c0:	89bb      	ldrh	r3, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr

080042ce <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f81d 	bl	800431c <RTC_EnterInitMode>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
 80042ec:	e011      	b.n	8004312 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	0c12      	lsrs	r2, r2, #16
 80042f6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	b292      	uxth	r2, r2
 8004300:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f832 	bl	800436c <RTC_ExitInitMode>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004312:	7bfb      	ldrb	r3, [r7, #15]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004328:	f7fd fada 	bl	80018e0 <HAL_GetTick>
 800432c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800432e:	e009      	b.n	8004344 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004330:	f7fd fad6 	bl	80018e0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800433e:	d901      	bls.n	8004344 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e00f      	b.n	8004364 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0ee      	beq.n	8004330 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0210 	orr.w	r2, r2, #16
 8004360:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0210 	bic.w	r2, r2, #16
 8004386:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004388:	f7fd faaa 	bl	80018e0 <HAL_GetTick>
 800438c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800438e:	e009      	b.n	80043a4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004390:	f7fd faa6 	bl	80018e0 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800439e:	d901      	bls.n	80043a4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e007      	b.n	80043b4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0ee      	beq.n	8004390 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	4603      	mov	r3, r0
 80043c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80043ca:	e005      	b.n	80043d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	3301      	adds	r3, #1
 80043d0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	3b0a      	subs	r3, #10
 80043d6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	2b09      	cmp	r3, #9
 80043dc:	d8f6      	bhi.n	80043cc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	b2db      	uxtb	r3, r3
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr

080043f6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	4603      	mov	r3, r0
 80043fe:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	091b      	lsrs	r3, r3, #4
 8004408:	b2db      	uxtb	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	b2da      	uxtb	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	4413      	add	r3, r2
 8004424:	b2db      	uxtb	r3, r3
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	7bdb      	ldrb	r3, [r3, #15]
 800444e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	7b5b      	ldrb	r3, [r3, #13]
 8004454:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	7b9b      	ldrb	r3, [r3, #14]
 800445a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800445c:	2300      	movs	r3, #0
 800445e:	60bb      	str	r3, [r7, #8]
 8004460:	e06f      	b.n	8004542 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d011      	beq.n	800448c <RTC_DateUpdate+0x5c>
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d00e      	beq.n	800448c <RTC_DateUpdate+0x5c>
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b05      	cmp	r3, #5
 8004472:	d00b      	beq.n	800448c <RTC_DateUpdate+0x5c>
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	2b07      	cmp	r3, #7
 8004478:	d008      	beq.n	800448c <RTC_DateUpdate+0x5c>
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d005      	beq.n	800448c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b0a      	cmp	r3, #10
 8004484:	d002      	beq.n	800448c <RTC_DateUpdate+0x5c>
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b0c      	cmp	r3, #12
 800448a:	d117      	bne.n	80044bc <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b1e      	cmp	r3, #30
 8004490:	d803      	bhi.n	800449a <RTC_DateUpdate+0x6a>
      {
        day++;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3301      	adds	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004498:	e050      	b.n	800453c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b0c      	cmp	r3, #12
 800449e:	d005      	beq.n	80044ac <RTC_DateUpdate+0x7c>
        {
          month++;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	3301      	adds	r3, #1
 80044a4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80044a6:	2301      	movs	r3, #1
 80044a8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80044aa:	e047      	b.n	800453c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80044ac:	2301      	movs	r3, #1
 80044ae:	613b      	str	r3, [r7, #16]
          day = 1U;
 80044b0:	2301      	movs	r3, #1
 80044b2:	60fb      	str	r3, [r7, #12]
          year++;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	3301      	adds	r3, #1
 80044b8:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80044ba:	e03f      	b.n	800453c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d008      	beq.n	80044d4 <RTC_DateUpdate+0xa4>
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b06      	cmp	r3, #6
 80044c6:	d005      	beq.n	80044d4 <RTC_DateUpdate+0xa4>
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b09      	cmp	r3, #9
 80044cc:	d002      	beq.n	80044d4 <RTC_DateUpdate+0xa4>
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b0b      	cmp	r3, #11
 80044d2:	d10c      	bne.n	80044ee <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b1d      	cmp	r3, #29
 80044d8:	d803      	bhi.n	80044e2 <RTC_DateUpdate+0xb2>
      {
        day++;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3301      	adds	r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80044e0:	e02c      	b.n	800453c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	3301      	adds	r3, #1
 80044e6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80044e8:	2301      	movs	r3, #1
 80044ea:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80044ec:	e026      	b.n	800453c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d123      	bne.n	800453c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b1b      	cmp	r3, #27
 80044f8:	d803      	bhi.n	8004502 <RTC_DateUpdate+0xd2>
      {
        day++;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3301      	adds	r3, #1
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	e01c      	b.n	800453c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b1c      	cmp	r3, #28
 8004506:	d111      	bne.n	800452c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	b29b      	uxth	r3, r3
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f839 	bl	8004584 <RTC_IsLeapYear>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3301      	adds	r3, #1
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	e00d      	b.n	800453c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	3301      	adds	r3, #1
 8004524:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004526:	2301      	movs	r3, #1
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	e007      	b.n	800453c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b1d      	cmp	r3, #29
 8004530:	d104      	bne.n	800453c <RTC_DateUpdate+0x10c>
      {
        month++;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	3301      	adds	r3, #1
 8004536:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004538:	2301      	movs	r3, #1
 800453a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	3301      	adds	r3, #1
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d38b      	bcc.n	8004462 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	b2da      	uxtb	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	b2da      	uxtb	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	4619      	mov	r1, r3
 800456c:	6978      	ldr	r0, [r7, #20]
 800456e:	f000 f83b 	bl	80045e8 <RTC_WeekDayNum>
 8004572:	4603      	mov	r3, r0
 8004574:	461a      	mov	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	731a      	strb	r2, [r3, #12]
}
 800457a:	bf00      	nop
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	4603      	mov	r3, r0
 800458c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	e01d      	b.n	80045da <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	4a10      	ldr	r2, [pc, #64]	@ (80045e4 <RTC_IsLeapYear+0x60>)
 80045a2:	fba2 1203 	umull	r1, r2, r2, r3
 80045a6:	0952      	lsrs	r2, r2, #5
 80045a8:	2164      	movs	r1, #100	@ 0x64
 80045aa:	fb01 f202 	mul.w	r2, r1, r2
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e00f      	b.n	80045da <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	4a09      	ldr	r2, [pc, #36]	@ (80045e4 <RTC_IsLeapYear+0x60>)
 80045be:	fba2 1203 	umull	r1, r2, r2, r3
 80045c2:	09d2      	lsrs	r2, r2, #7
 80045c4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80045c8:	fb01 f202 	mul.w	r2, r1, r2
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80045d8:	2300      	movs	r3, #0
  }
}
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr
 80045e4:	51eb851f 	.word	0x51eb851f

080045e8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	460b      	mov	r3, r1
 80045f2:	70fb      	strb	r3, [r7, #3]
 80045f4:	4613      	mov	r3, r2
 80045f6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8004606:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d82d      	bhi.n	800466a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	4613      	mov	r3, r2
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	4413      	add	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	4a2c      	ldr	r2, [pc, #176]	@ (80046cc <RTC_WeekDayNum+0xe4>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	085a      	lsrs	r2, r3, #1
 8004622:	78bb      	ldrb	r3, [r7, #2]
 8004624:	441a      	add	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	441a      	add	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	3b01      	subs	r3, #1
 800462e:	089b      	lsrs	r3, r3, #2
 8004630:	441a      	add	r2, r3
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	3b01      	subs	r3, #1
 8004636:	4926      	ldr	r1, [pc, #152]	@ (80046d0 <RTC_WeekDayNum+0xe8>)
 8004638:	fba1 1303 	umull	r1, r3, r1, r3
 800463c:	095b      	lsrs	r3, r3, #5
 800463e:	1ad2      	subs	r2, r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	3b01      	subs	r3, #1
 8004644:	4922      	ldr	r1, [pc, #136]	@ (80046d0 <RTC_WeekDayNum+0xe8>)
 8004646:	fba1 1303 	umull	r1, r3, r1, r3
 800464a:	09db      	lsrs	r3, r3, #7
 800464c:	4413      	add	r3, r2
 800464e:	1d1a      	adds	r2, r3, #4
 8004650:	4b20      	ldr	r3, [pc, #128]	@ (80046d4 <RTC_WeekDayNum+0xec>)
 8004652:	fba3 1302 	umull	r1, r3, r3, r2
 8004656:	1ad1      	subs	r1, r2, r3
 8004658:	0849      	lsrs	r1, r1, #1
 800465a:	440b      	add	r3, r1
 800465c:	0899      	lsrs	r1, r3, #2
 800465e:	460b      	mov	r3, r1
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	1a5b      	subs	r3, r3, r1
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	e029      	b.n	80046be <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800466a:	78fa      	ldrb	r2, [r7, #3]
 800466c:	4613      	mov	r3, r2
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4413      	add	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	4a15      	ldr	r2, [pc, #84]	@ (80046cc <RTC_WeekDayNum+0xe4>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	085a      	lsrs	r2, r3, #1
 800467e:	78bb      	ldrb	r3, [r7, #2]
 8004680:	441a      	add	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	441a      	add	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	089b      	lsrs	r3, r3, #2
 800468a:	441a      	add	r2, r3
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4910      	ldr	r1, [pc, #64]	@ (80046d0 <RTC_WeekDayNum+0xe8>)
 8004690:	fba1 1303 	umull	r1, r3, r1, r3
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	1ad2      	subs	r2, r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	490d      	ldr	r1, [pc, #52]	@ (80046d0 <RTC_WeekDayNum+0xe8>)
 800469c:	fba1 1303 	umull	r1, r3, r1, r3
 80046a0:	09db      	lsrs	r3, r3, #7
 80046a2:	4413      	add	r3, r2
 80046a4:	1c9a      	adds	r2, r3, #2
 80046a6:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <RTC_WeekDayNum+0xec>)
 80046a8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ac:	1ad1      	subs	r1, r2, r3
 80046ae:	0849      	lsrs	r1, r1, #1
 80046b0:	440b      	add	r3, r1
 80046b2:	0899      	lsrs	r1, r3, #2
 80046b4:	460b      	mov	r3, r1
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	1a5b      	subs	r3, r3, r1
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	b2db      	uxtb	r3, r3
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	38e38e39 	.word	0x38e38e39
 80046d0:	51eb851f 	.word	0x51eb851f
 80046d4:	24924925 	.word	0x24924925

080046d8 <siprintf>:
 80046d8:	b40e      	push	{r1, r2, r3}
 80046da:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80046de:	b510      	push	{r4, lr}
 80046e0:	2400      	movs	r4, #0
 80046e2:	b09d      	sub	sp, #116	@ 0x74
 80046e4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80046e6:	9002      	str	r0, [sp, #8]
 80046e8:	9006      	str	r0, [sp, #24]
 80046ea:	9107      	str	r1, [sp, #28]
 80046ec:	9104      	str	r1, [sp, #16]
 80046ee:	4809      	ldr	r0, [pc, #36]	@ (8004714 <siprintf+0x3c>)
 80046f0:	4909      	ldr	r1, [pc, #36]	@ (8004718 <siprintf+0x40>)
 80046f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80046f6:	9105      	str	r1, [sp, #20]
 80046f8:	6800      	ldr	r0, [r0, #0]
 80046fa:	a902      	add	r1, sp, #8
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004700:	f000 f992 	bl	8004a28 <_svfiprintf_r>
 8004704:	9b02      	ldr	r3, [sp, #8]
 8004706:	701c      	strb	r4, [r3, #0]
 8004708:	b01d      	add	sp, #116	@ 0x74
 800470a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800470e:	b003      	add	sp, #12
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000020 	.word	0x20000020
 8004718:	ffff0208 	.word	0xffff0208

0800471c <memset>:
 800471c:	4603      	mov	r3, r0
 800471e:	4402      	add	r2, r0
 8004720:	4293      	cmp	r3, r2
 8004722:	d100      	bne.n	8004726 <memset+0xa>
 8004724:	4770      	bx	lr
 8004726:	f803 1b01 	strb.w	r1, [r3], #1
 800472a:	e7f9      	b.n	8004720 <memset+0x4>

0800472c <__errno>:
 800472c:	4b01      	ldr	r3, [pc, #4]	@ (8004734 <__errno+0x8>)
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	20000020 	.word	0x20000020

08004738 <__libc_init_array>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	2600      	movs	r6, #0
 800473c:	4d0c      	ldr	r5, [pc, #48]	@ (8004770 <__libc_init_array+0x38>)
 800473e:	4c0d      	ldr	r4, [pc, #52]	@ (8004774 <__libc_init_array+0x3c>)
 8004740:	1b64      	subs	r4, r4, r5
 8004742:	10a4      	asrs	r4, r4, #2
 8004744:	42a6      	cmp	r6, r4
 8004746:	d109      	bne.n	800475c <__libc_init_array+0x24>
 8004748:	f000 fc76 	bl	8005038 <_init>
 800474c:	2600      	movs	r6, #0
 800474e:	4d0a      	ldr	r5, [pc, #40]	@ (8004778 <__libc_init_array+0x40>)
 8004750:	4c0a      	ldr	r4, [pc, #40]	@ (800477c <__libc_init_array+0x44>)
 8004752:	1b64      	subs	r4, r4, r5
 8004754:	10a4      	asrs	r4, r4, #2
 8004756:	42a6      	cmp	r6, r4
 8004758:	d105      	bne.n	8004766 <__libc_init_array+0x2e>
 800475a:	bd70      	pop	{r4, r5, r6, pc}
 800475c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004760:	4798      	blx	r3
 8004762:	3601      	adds	r6, #1
 8004764:	e7ee      	b.n	8004744 <__libc_init_array+0xc>
 8004766:	f855 3b04 	ldr.w	r3, [r5], #4
 800476a:	4798      	blx	r3
 800476c:	3601      	adds	r6, #1
 800476e:	e7f2      	b.n	8004756 <__libc_init_array+0x1e>
 8004770:	08005118 	.word	0x08005118
 8004774:	08005118 	.word	0x08005118
 8004778:	08005118 	.word	0x08005118
 800477c:	0800511c 	.word	0x0800511c

08004780 <__retarget_lock_acquire_recursive>:
 8004780:	4770      	bx	lr

08004782 <__retarget_lock_release_recursive>:
 8004782:	4770      	bx	lr

08004784 <_free_r>:
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	4605      	mov	r5, r0
 8004788:	2900      	cmp	r1, #0
 800478a:	d040      	beq.n	800480e <_free_r+0x8a>
 800478c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004790:	1f0c      	subs	r4, r1, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	bfb8      	it	lt
 8004796:	18e4      	addlt	r4, r4, r3
 8004798:	f000 f8de 	bl	8004958 <__malloc_lock>
 800479c:	4a1c      	ldr	r2, [pc, #112]	@ (8004810 <_free_r+0x8c>)
 800479e:	6813      	ldr	r3, [r2, #0]
 80047a0:	b933      	cbnz	r3, 80047b0 <_free_r+0x2c>
 80047a2:	6063      	str	r3, [r4, #4]
 80047a4:	6014      	str	r4, [r2, #0]
 80047a6:	4628      	mov	r0, r5
 80047a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047ac:	f000 b8da 	b.w	8004964 <__malloc_unlock>
 80047b0:	42a3      	cmp	r3, r4
 80047b2:	d908      	bls.n	80047c6 <_free_r+0x42>
 80047b4:	6820      	ldr	r0, [r4, #0]
 80047b6:	1821      	adds	r1, r4, r0
 80047b8:	428b      	cmp	r3, r1
 80047ba:	bf01      	itttt	eq
 80047bc:	6819      	ldreq	r1, [r3, #0]
 80047be:	685b      	ldreq	r3, [r3, #4]
 80047c0:	1809      	addeq	r1, r1, r0
 80047c2:	6021      	streq	r1, [r4, #0]
 80047c4:	e7ed      	b.n	80047a2 <_free_r+0x1e>
 80047c6:	461a      	mov	r2, r3
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	b10b      	cbz	r3, 80047d0 <_free_r+0x4c>
 80047cc:	42a3      	cmp	r3, r4
 80047ce:	d9fa      	bls.n	80047c6 <_free_r+0x42>
 80047d0:	6811      	ldr	r1, [r2, #0]
 80047d2:	1850      	adds	r0, r2, r1
 80047d4:	42a0      	cmp	r0, r4
 80047d6:	d10b      	bne.n	80047f0 <_free_r+0x6c>
 80047d8:	6820      	ldr	r0, [r4, #0]
 80047da:	4401      	add	r1, r0
 80047dc:	1850      	adds	r0, r2, r1
 80047de:	4283      	cmp	r3, r0
 80047e0:	6011      	str	r1, [r2, #0]
 80047e2:	d1e0      	bne.n	80047a6 <_free_r+0x22>
 80047e4:	6818      	ldr	r0, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4408      	add	r0, r1
 80047ea:	6010      	str	r0, [r2, #0]
 80047ec:	6053      	str	r3, [r2, #4]
 80047ee:	e7da      	b.n	80047a6 <_free_r+0x22>
 80047f0:	d902      	bls.n	80047f8 <_free_r+0x74>
 80047f2:	230c      	movs	r3, #12
 80047f4:	602b      	str	r3, [r5, #0]
 80047f6:	e7d6      	b.n	80047a6 <_free_r+0x22>
 80047f8:	6820      	ldr	r0, [r4, #0]
 80047fa:	1821      	adds	r1, r4, r0
 80047fc:	428b      	cmp	r3, r1
 80047fe:	bf01      	itttt	eq
 8004800:	6819      	ldreq	r1, [r3, #0]
 8004802:	685b      	ldreq	r3, [r3, #4]
 8004804:	1809      	addeq	r1, r1, r0
 8004806:	6021      	streq	r1, [r4, #0]
 8004808:	6063      	str	r3, [r4, #4]
 800480a:	6054      	str	r4, [r2, #4]
 800480c:	e7cb      	b.n	80047a6 <_free_r+0x22>
 800480e:	bd38      	pop	{r3, r4, r5, pc}
 8004810:	200002d0 	.word	0x200002d0

08004814 <sbrk_aligned>:
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	4e0f      	ldr	r6, [pc, #60]	@ (8004854 <sbrk_aligned+0x40>)
 8004818:	460c      	mov	r4, r1
 800481a:	6831      	ldr	r1, [r6, #0]
 800481c:	4605      	mov	r5, r0
 800481e:	b911      	cbnz	r1, 8004826 <sbrk_aligned+0x12>
 8004820:	f000 fba8 	bl	8004f74 <_sbrk_r>
 8004824:	6030      	str	r0, [r6, #0]
 8004826:	4621      	mov	r1, r4
 8004828:	4628      	mov	r0, r5
 800482a:	f000 fba3 	bl	8004f74 <_sbrk_r>
 800482e:	1c43      	adds	r3, r0, #1
 8004830:	d103      	bne.n	800483a <sbrk_aligned+0x26>
 8004832:	f04f 34ff 	mov.w	r4, #4294967295
 8004836:	4620      	mov	r0, r4
 8004838:	bd70      	pop	{r4, r5, r6, pc}
 800483a:	1cc4      	adds	r4, r0, #3
 800483c:	f024 0403 	bic.w	r4, r4, #3
 8004840:	42a0      	cmp	r0, r4
 8004842:	d0f8      	beq.n	8004836 <sbrk_aligned+0x22>
 8004844:	1a21      	subs	r1, r4, r0
 8004846:	4628      	mov	r0, r5
 8004848:	f000 fb94 	bl	8004f74 <_sbrk_r>
 800484c:	3001      	adds	r0, #1
 800484e:	d1f2      	bne.n	8004836 <sbrk_aligned+0x22>
 8004850:	e7ef      	b.n	8004832 <sbrk_aligned+0x1e>
 8004852:	bf00      	nop
 8004854:	200002cc 	.word	0x200002cc

08004858 <_malloc_r>:
 8004858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800485c:	1ccd      	adds	r5, r1, #3
 800485e:	f025 0503 	bic.w	r5, r5, #3
 8004862:	3508      	adds	r5, #8
 8004864:	2d0c      	cmp	r5, #12
 8004866:	bf38      	it	cc
 8004868:	250c      	movcc	r5, #12
 800486a:	2d00      	cmp	r5, #0
 800486c:	4606      	mov	r6, r0
 800486e:	db01      	blt.n	8004874 <_malloc_r+0x1c>
 8004870:	42a9      	cmp	r1, r5
 8004872:	d904      	bls.n	800487e <_malloc_r+0x26>
 8004874:	230c      	movs	r3, #12
 8004876:	6033      	str	r3, [r6, #0]
 8004878:	2000      	movs	r0, #0
 800487a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800487e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004954 <_malloc_r+0xfc>
 8004882:	f000 f869 	bl	8004958 <__malloc_lock>
 8004886:	f8d8 3000 	ldr.w	r3, [r8]
 800488a:	461c      	mov	r4, r3
 800488c:	bb44      	cbnz	r4, 80048e0 <_malloc_r+0x88>
 800488e:	4629      	mov	r1, r5
 8004890:	4630      	mov	r0, r6
 8004892:	f7ff ffbf 	bl	8004814 <sbrk_aligned>
 8004896:	1c43      	adds	r3, r0, #1
 8004898:	4604      	mov	r4, r0
 800489a:	d158      	bne.n	800494e <_malloc_r+0xf6>
 800489c:	f8d8 4000 	ldr.w	r4, [r8]
 80048a0:	4627      	mov	r7, r4
 80048a2:	2f00      	cmp	r7, #0
 80048a4:	d143      	bne.n	800492e <_malloc_r+0xd6>
 80048a6:	2c00      	cmp	r4, #0
 80048a8:	d04b      	beq.n	8004942 <_malloc_r+0xea>
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	4639      	mov	r1, r7
 80048ae:	4630      	mov	r0, r6
 80048b0:	eb04 0903 	add.w	r9, r4, r3
 80048b4:	f000 fb5e 	bl	8004f74 <_sbrk_r>
 80048b8:	4581      	cmp	r9, r0
 80048ba:	d142      	bne.n	8004942 <_malloc_r+0xea>
 80048bc:	6821      	ldr	r1, [r4, #0]
 80048be:	4630      	mov	r0, r6
 80048c0:	1a6d      	subs	r5, r5, r1
 80048c2:	4629      	mov	r1, r5
 80048c4:	f7ff ffa6 	bl	8004814 <sbrk_aligned>
 80048c8:	3001      	adds	r0, #1
 80048ca:	d03a      	beq.n	8004942 <_malloc_r+0xea>
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	442b      	add	r3, r5
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	f8d8 3000 	ldr.w	r3, [r8]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	bb62      	cbnz	r2, 8004934 <_malloc_r+0xdc>
 80048da:	f8c8 7000 	str.w	r7, [r8]
 80048de:	e00f      	b.n	8004900 <_malloc_r+0xa8>
 80048e0:	6822      	ldr	r2, [r4, #0]
 80048e2:	1b52      	subs	r2, r2, r5
 80048e4:	d420      	bmi.n	8004928 <_malloc_r+0xd0>
 80048e6:	2a0b      	cmp	r2, #11
 80048e8:	d917      	bls.n	800491a <_malloc_r+0xc2>
 80048ea:	1961      	adds	r1, r4, r5
 80048ec:	42a3      	cmp	r3, r4
 80048ee:	6025      	str	r5, [r4, #0]
 80048f0:	bf18      	it	ne
 80048f2:	6059      	strne	r1, [r3, #4]
 80048f4:	6863      	ldr	r3, [r4, #4]
 80048f6:	bf08      	it	eq
 80048f8:	f8c8 1000 	streq.w	r1, [r8]
 80048fc:	5162      	str	r2, [r4, r5]
 80048fe:	604b      	str	r3, [r1, #4]
 8004900:	4630      	mov	r0, r6
 8004902:	f000 f82f 	bl	8004964 <__malloc_unlock>
 8004906:	f104 000b 	add.w	r0, r4, #11
 800490a:	1d23      	adds	r3, r4, #4
 800490c:	f020 0007 	bic.w	r0, r0, #7
 8004910:	1ac2      	subs	r2, r0, r3
 8004912:	bf1c      	itt	ne
 8004914:	1a1b      	subne	r3, r3, r0
 8004916:	50a3      	strne	r3, [r4, r2]
 8004918:	e7af      	b.n	800487a <_malloc_r+0x22>
 800491a:	6862      	ldr	r2, [r4, #4]
 800491c:	42a3      	cmp	r3, r4
 800491e:	bf0c      	ite	eq
 8004920:	f8c8 2000 	streq.w	r2, [r8]
 8004924:	605a      	strne	r2, [r3, #4]
 8004926:	e7eb      	b.n	8004900 <_malloc_r+0xa8>
 8004928:	4623      	mov	r3, r4
 800492a:	6864      	ldr	r4, [r4, #4]
 800492c:	e7ae      	b.n	800488c <_malloc_r+0x34>
 800492e:	463c      	mov	r4, r7
 8004930:	687f      	ldr	r7, [r7, #4]
 8004932:	e7b6      	b.n	80048a2 <_malloc_r+0x4a>
 8004934:	461a      	mov	r2, r3
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	42a3      	cmp	r3, r4
 800493a:	d1fb      	bne.n	8004934 <_malloc_r+0xdc>
 800493c:	2300      	movs	r3, #0
 800493e:	6053      	str	r3, [r2, #4]
 8004940:	e7de      	b.n	8004900 <_malloc_r+0xa8>
 8004942:	230c      	movs	r3, #12
 8004944:	4630      	mov	r0, r6
 8004946:	6033      	str	r3, [r6, #0]
 8004948:	f000 f80c 	bl	8004964 <__malloc_unlock>
 800494c:	e794      	b.n	8004878 <_malloc_r+0x20>
 800494e:	6005      	str	r5, [r0, #0]
 8004950:	e7d6      	b.n	8004900 <_malloc_r+0xa8>
 8004952:	bf00      	nop
 8004954:	200002d0 	.word	0x200002d0

08004958 <__malloc_lock>:
 8004958:	4801      	ldr	r0, [pc, #4]	@ (8004960 <__malloc_lock+0x8>)
 800495a:	f7ff bf11 	b.w	8004780 <__retarget_lock_acquire_recursive>
 800495e:	bf00      	nop
 8004960:	200002c8 	.word	0x200002c8

08004964 <__malloc_unlock>:
 8004964:	4801      	ldr	r0, [pc, #4]	@ (800496c <__malloc_unlock+0x8>)
 8004966:	f7ff bf0c 	b.w	8004782 <__retarget_lock_release_recursive>
 800496a:	bf00      	nop
 800496c:	200002c8 	.word	0x200002c8

08004970 <__ssputs_r>:
 8004970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004974:	461f      	mov	r7, r3
 8004976:	688e      	ldr	r6, [r1, #8]
 8004978:	4682      	mov	sl, r0
 800497a:	42be      	cmp	r6, r7
 800497c:	460c      	mov	r4, r1
 800497e:	4690      	mov	r8, r2
 8004980:	680b      	ldr	r3, [r1, #0]
 8004982:	d82d      	bhi.n	80049e0 <__ssputs_r+0x70>
 8004984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004988:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800498c:	d026      	beq.n	80049dc <__ssputs_r+0x6c>
 800498e:	6965      	ldr	r5, [r4, #20]
 8004990:	6909      	ldr	r1, [r1, #16]
 8004992:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004996:	eba3 0901 	sub.w	r9, r3, r1
 800499a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800499e:	1c7b      	adds	r3, r7, #1
 80049a0:	444b      	add	r3, r9
 80049a2:	106d      	asrs	r5, r5, #1
 80049a4:	429d      	cmp	r5, r3
 80049a6:	bf38      	it	cc
 80049a8:	461d      	movcc	r5, r3
 80049aa:	0553      	lsls	r3, r2, #21
 80049ac:	d527      	bpl.n	80049fe <__ssputs_r+0x8e>
 80049ae:	4629      	mov	r1, r5
 80049b0:	f7ff ff52 	bl	8004858 <_malloc_r>
 80049b4:	4606      	mov	r6, r0
 80049b6:	b360      	cbz	r0, 8004a12 <__ssputs_r+0xa2>
 80049b8:	464a      	mov	r2, r9
 80049ba:	6921      	ldr	r1, [r4, #16]
 80049bc:	f000 faf8 	bl	8004fb0 <memcpy>
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80049c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ca:	81a3      	strh	r3, [r4, #12]
 80049cc:	6126      	str	r6, [r4, #16]
 80049ce:	444e      	add	r6, r9
 80049d0:	6026      	str	r6, [r4, #0]
 80049d2:	463e      	mov	r6, r7
 80049d4:	6165      	str	r5, [r4, #20]
 80049d6:	eba5 0509 	sub.w	r5, r5, r9
 80049da:	60a5      	str	r5, [r4, #8]
 80049dc:	42be      	cmp	r6, r7
 80049de:	d900      	bls.n	80049e2 <__ssputs_r+0x72>
 80049e0:	463e      	mov	r6, r7
 80049e2:	4632      	mov	r2, r6
 80049e4:	4641      	mov	r1, r8
 80049e6:	6820      	ldr	r0, [r4, #0]
 80049e8:	f000 faaa 	bl	8004f40 <memmove>
 80049ec:	2000      	movs	r0, #0
 80049ee:	68a3      	ldr	r3, [r4, #8]
 80049f0:	1b9b      	subs	r3, r3, r6
 80049f2:	60a3      	str	r3, [r4, #8]
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	4433      	add	r3, r6
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049fe:	462a      	mov	r2, r5
 8004a00:	f000 fae4 	bl	8004fcc <_realloc_r>
 8004a04:	4606      	mov	r6, r0
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d1e0      	bne.n	80049cc <__ssputs_r+0x5c>
 8004a0a:	4650      	mov	r0, sl
 8004a0c:	6921      	ldr	r1, [r4, #16]
 8004a0e:	f7ff feb9 	bl	8004784 <_free_r>
 8004a12:	230c      	movs	r3, #12
 8004a14:	f8ca 3000 	str.w	r3, [sl]
 8004a18:	89a3      	ldrh	r3, [r4, #12]
 8004a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a22:	81a3      	strh	r3, [r4, #12]
 8004a24:	e7e9      	b.n	80049fa <__ssputs_r+0x8a>
	...

08004a28 <_svfiprintf_r>:
 8004a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2c:	4698      	mov	r8, r3
 8004a2e:	898b      	ldrh	r3, [r1, #12]
 8004a30:	4607      	mov	r7, r0
 8004a32:	061b      	lsls	r3, r3, #24
 8004a34:	460d      	mov	r5, r1
 8004a36:	4614      	mov	r4, r2
 8004a38:	b09d      	sub	sp, #116	@ 0x74
 8004a3a:	d510      	bpl.n	8004a5e <_svfiprintf_r+0x36>
 8004a3c:	690b      	ldr	r3, [r1, #16]
 8004a3e:	b973      	cbnz	r3, 8004a5e <_svfiprintf_r+0x36>
 8004a40:	2140      	movs	r1, #64	@ 0x40
 8004a42:	f7ff ff09 	bl	8004858 <_malloc_r>
 8004a46:	6028      	str	r0, [r5, #0]
 8004a48:	6128      	str	r0, [r5, #16]
 8004a4a:	b930      	cbnz	r0, 8004a5a <_svfiprintf_r+0x32>
 8004a4c:	230c      	movs	r3, #12
 8004a4e:	603b      	str	r3, [r7, #0]
 8004a50:	f04f 30ff 	mov.w	r0, #4294967295
 8004a54:	b01d      	add	sp, #116	@ 0x74
 8004a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a5a:	2340      	movs	r3, #64	@ 0x40
 8004a5c:	616b      	str	r3, [r5, #20]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a62:	2320      	movs	r3, #32
 8004a64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a68:	2330      	movs	r3, #48	@ 0x30
 8004a6a:	f04f 0901 	mov.w	r9, #1
 8004a6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a72:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004c0c <_svfiprintf_r+0x1e4>
 8004a76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a7a:	4623      	mov	r3, r4
 8004a7c:	469a      	mov	sl, r3
 8004a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a82:	b10a      	cbz	r2, 8004a88 <_svfiprintf_r+0x60>
 8004a84:	2a25      	cmp	r2, #37	@ 0x25
 8004a86:	d1f9      	bne.n	8004a7c <_svfiprintf_r+0x54>
 8004a88:	ebba 0b04 	subs.w	fp, sl, r4
 8004a8c:	d00b      	beq.n	8004aa6 <_svfiprintf_r+0x7e>
 8004a8e:	465b      	mov	r3, fp
 8004a90:	4622      	mov	r2, r4
 8004a92:	4629      	mov	r1, r5
 8004a94:	4638      	mov	r0, r7
 8004a96:	f7ff ff6b 	bl	8004970 <__ssputs_r>
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	f000 80a7 	beq.w	8004bee <_svfiprintf_r+0x1c6>
 8004aa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004aa2:	445a      	add	r2, fp
 8004aa4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 809f 	beq.w	8004bee <_svfiprintf_r+0x1c6>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004aba:	f10a 0a01 	add.w	sl, sl, #1
 8004abe:	9304      	str	r3, [sp, #16]
 8004ac0:	9307      	str	r3, [sp, #28]
 8004ac2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ac6:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ac8:	4654      	mov	r4, sl
 8004aca:	2205      	movs	r2, #5
 8004acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad0:	484e      	ldr	r0, [pc, #312]	@ (8004c0c <_svfiprintf_r+0x1e4>)
 8004ad2:	f000 fa5f 	bl	8004f94 <memchr>
 8004ad6:	9a04      	ldr	r2, [sp, #16]
 8004ad8:	b9d8      	cbnz	r0, 8004b12 <_svfiprintf_r+0xea>
 8004ada:	06d0      	lsls	r0, r2, #27
 8004adc:	bf44      	itt	mi
 8004ade:	2320      	movmi	r3, #32
 8004ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ae4:	0711      	lsls	r1, r2, #28
 8004ae6:	bf44      	itt	mi
 8004ae8:	232b      	movmi	r3, #43	@ 0x2b
 8004aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004aee:	f89a 3000 	ldrb.w	r3, [sl]
 8004af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004af4:	d015      	beq.n	8004b22 <_svfiprintf_r+0xfa>
 8004af6:	4654      	mov	r4, sl
 8004af8:	2000      	movs	r0, #0
 8004afa:	f04f 0c0a 	mov.w	ip, #10
 8004afe:	9a07      	ldr	r2, [sp, #28]
 8004b00:	4621      	mov	r1, r4
 8004b02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b06:	3b30      	subs	r3, #48	@ 0x30
 8004b08:	2b09      	cmp	r3, #9
 8004b0a:	d94b      	bls.n	8004ba4 <_svfiprintf_r+0x17c>
 8004b0c:	b1b0      	cbz	r0, 8004b3c <_svfiprintf_r+0x114>
 8004b0e:	9207      	str	r2, [sp, #28]
 8004b10:	e014      	b.n	8004b3c <_svfiprintf_r+0x114>
 8004b12:	eba0 0308 	sub.w	r3, r0, r8
 8004b16:	fa09 f303 	lsl.w	r3, r9, r3
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	46a2      	mov	sl, r4
 8004b1e:	9304      	str	r3, [sp, #16]
 8004b20:	e7d2      	b.n	8004ac8 <_svfiprintf_r+0xa0>
 8004b22:	9b03      	ldr	r3, [sp, #12]
 8004b24:	1d19      	adds	r1, r3, #4
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	9103      	str	r1, [sp, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	bfbb      	ittet	lt
 8004b2e:	425b      	neglt	r3, r3
 8004b30:	f042 0202 	orrlt.w	r2, r2, #2
 8004b34:	9307      	strge	r3, [sp, #28]
 8004b36:	9307      	strlt	r3, [sp, #28]
 8004b38:	bfb8      	it	lt
 8004b3a:	9204      	strlt	r2, [sp, #16]
 8004b3c:	7823      	ldrb	r3, [r4, #0]
 8004b3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b40:	d10a      	bne.n	8004b58 <_svfiprintf_r+0x130>
 8004b42:	7863      	ldrb	r3, [r4, #1]
 8004b44:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b46:	d132      	bne.n	8004bae <_svfiprintf_r+0x186>
 8004b48:	9b03      	ldr	r3, [sp, #12]
 8004b4a:	3402      	adds	r4, #2
 8004b4c:	1d1a      	adds	r2, r3, #4
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	9203      	str	r2, [sp, #12]
 8004b52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b56:	9305      	str	r3, [sp, #20]
 8004b58:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004c10 <_svfiprintf_r+0x1e8>
 8004b5c:	2203      	movs	r2, #3
 8004b5e:	4650      	mov	r0, sl
 8004b60:	7821      	ldrb	r1, [r4, #0]
 8004b62:	f000 fa17 	bl	8004f94 <memchr>
 8004b66:	b138      	cbz	r0, 8004b78 <_svfiprintf_r+0x150>
 8004b68:	2240      	movs	r2, #64	@ 0x40
 8004b6a:	9b04      	ldr	r3, [sp, #16]
 8004b6c:	eba0 000a 	sub.w	r0, r0, sl
 8004b70:	4082      	lsls	r2, r0
 8004b72:	4313      	orrs	r3, r2
 8004b74:	3401      	adds	r4, #1
 8004b76:	9304      	str	r3, [sp, #16]
 8004b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b7c:	2206      	movs	r2, #6
 8004b7e:	4825      	ldr	r0, [pc, #148]	@ (8004c14 <_svfiprintf_r+0x1ec>)
 8004b80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b84:	f000 fa06 	bl	8004f94 <memchr>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d036      	beq.n	8004bfa <_svfiprintf_r+0x1d2>
 8004b8c:	4b22      	ldr	r3, [pc, #136]	@ (8004c18 <_svfiprintf_r+0x1f0>)
 8004b8e:	bb1b      	cbnz	r3, 8004bd8 <_svfiprintf_r+0x1b0>
 8004b90:	9b03      	ldr	r3, [sp, #12]
 8004b92:	3307      	adds	r3, #7
 8004b94:	f023 0307 	bic.w	r3, r3, #7
 8004b98:	3308      	adds	r3, #8
 8004b9a:	9303      	str	r3, [sp, #12]
 8004b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b9e:	4433      	add	r3, r6
 8004ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ba2:	e76a      	b.n	8004a7a <_svfiprintf_r+0x52>
 8004ba4:	460c      	mov	r4, r1
 8004ba6:	2001      	movs	r0, #1
 8004ba8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bac:	e7a8      	b.n	8004b00 <_svfiprintf_r+0xd8>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f04f 0c0a 	mov.w	ip, #10
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	3401      	adds	r4, #1
 8004bb8:	9305      	str	r3, [sp, #20]
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bc0:	3a30      	subs	r2, #48	@ 0x30
 8004bc2:	2a09      	cmp	r2, #9
 8004bc4:	d903      	bls.n	8004bce <_svfiprintf_r+0x1a6>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0c6      	beq.n	8004b58 <_svfiprintf_r+0x130>
 8004bca:	9105      	str	r1, [sp, #20]
 8004bcc:	e7c4      	b.n	8004b58 <_svfiprintf_r+0x130>
 8004bce:	4604      	mov	r4, r0
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bd6:	e7f0      	b.n	8004bba <_svfiprintf_r+0x192>
 8004bd8:	ab03      	add	r3, sp, #12
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	462a      	mov	r2, r5
 8004bde:	4638      	mov	r0, r7
 8004be0:	4b0e      	ldr	r3, [pc, #56]	@ (8004c1c <_svfiprintf_r+0x1f4>)
 8004be2:	a904      	add	r1, sp, #16
 8004be4:	f3af 8000 	nop.w
 8004be8:	1c42      	adds	r2, r0, #1
 8004bea:	4606      	mov	r6, r0
 8004bec:	d1d6      	bne.n	8004b9c <_svfiprintf_r+0x174>
 8004bee:	89ab      	ldrh	r3, [r5, #12]
 8004bf0:	065b      	lsls	r3, r3, #25
 8004bf2:	f53f af2d 	bmi.w	8004a50 <_svfiprintf_r+0x28>
 8004bf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004bf8:	e72c      	b.n	8004a54 <_svfiprintf_r+0x2c>
 8004bfa:	ab03      	add	r3, sp, #12
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	462a      	mov	r2, r5
 8004c00:	4638      	mov	r0, r7
 8004c02:	4b06      	ldr	r3, [pc, #24]	@ (8004c1c <_svfiprintf_r+0x1f4>)
 8004c04:	a904      	add	r1, sp, #16
 8004c06:	f000 f87d 	bl	8004d04 <_printf_i>
 8004c0a:	e7ed      	b.n	8004be8 <_svfiprintf_r+0x1c0>
 8004c0c:	080050e2 	.word	0x080050e2
 8004c10:	080050e8 	.word	0x080050e8
 8004c14:	080050ec 	.word	0x080050ec
 8004c18:	00000000 	.word	0x00000000
 8004c1c:	08004971 	.word	0x08004971

08004c20 <_printf_common>:
 8004c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c24:	4616      	mov	r6, r2
 8004c26:	4698      	mov	r8, r3
 8004c28:	688a      	ldr	r2, [r1, #8]
 8004c2a:	690b      	ldr	r3, [r1, #16]
 8004c2c:	4607      	mov	r7, r0
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	bfb8      	it	lt
 8004c32:	4613      	movlt	r3, r2
 8004c34:	6033      	str	r3, [r6, #0]
 8004c36:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c40:	b10a      	cbz	r2, 8004c46 <_printf_common+0x26>
 8004c42:	3301      	adds	r3, #1
 8004c44:	6033      	str	r3, [r6, #0]
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	0699      	lsls	r1, r3, #26
 8004c4a:	bf42      	ittt	mi
 8004c4c:	6833      	ldrmi	r3, [r6, #0]
 8004c4e:	3302      	addmi	r3, #2
 8004c50:	6033      	strmi	r3, [r6, #0]
 8004c52:	6825      	ldr	r5, [r4, #0]
 8004c54:	f015 0506 	ands.w	r5, r5, #6
 8004c58:	d106      	bne.n	8004c68 <_printf_common+0x48>
 8004c5a:	f104 0a19 	add.w	sl, r4, #25
 8004c5e:	68e3      	ldr	r3, [r4, #12]
 8004c60:	6832      	ldr	r2, [r6, #0]
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	42ab      	cmp	r3, r5
 8004c66:	dc2b      	bgt.n	8004cc0 <_printf_common+0xa0>
 8004c68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c6c:	6822      	ldr	r2, [r4, #0]
 8004c6e:	3b00      	subs	r3, #0
 8004c70:	bf18      	it	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	0692      	lsls	r2, r2, #26
 8004c76:	d430      	bmi.n	8004cda <_printf_common+0xba>
 8004c78:	4641      	mov	r1, r8
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c80:	47c8      	blx	r9
 8004c82:	3001      	adds	r0, #1
 8004c84:	d023      	beq.n	8004cce <_printf_common+0xae>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	6922      	ldr	r2, [r4, #16]
 8004c8a:	f003 0306 	and.w	r3, r3, #6
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	bf14      	ite	ne
 8004c92:	2500      	movne	r5, #0
 8004c94:	6833      	ldreq	r3, [r6, #0]
 8004c96:	f04f 0600 	mov.w	r6, #0
 8004c9a:	bf08      	it	eq
 8004c9c:	68e5      	ldreq	r5, [r4, #12]
 8004c9e:	f104 041a 	add.w	r4, r4, #26
 8004ca2:	bf08      	it	eq
 8004ca4:	1aed      	subeq	r5, r5, r3
 8004ca6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004caa:	bf08      	it	eq
 8004cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	bfc4      	itt	gt
 8004cb4:	1a9b      	subgt	r3, r3, r2
 8004cb6:	18ed      	addgt	r5, r5, r3
 8004cb8:	42b5      	cmp	r5, r6
 8004cba:	d11a      	bne.n	8004cf2 <_printf_common+0xd2>
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	e008      	b.n	8004cd2 <_printf_common+0xb2>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4652      	mov	r2, sl
 8004cc4:	4641      	mov	r1, r8
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	47c8      	blx	r9
 8004cca:	3001      	adds	r0, #1
 8004ccc:	d103      	bne.n	8004cd6 <_printf_common+0xb6>
 8004cce:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd6:	3501      	adds	r5, #1
 8004cd8:	e7c1      	b.n	8004c5e <_printf_common+0x3e>
 8004cda:	2030      	movs	r0, #48	@ 0x30
 8004cdc:	18e1      	adds	r1, r4, r3
 8004cde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ce8:	4422      	add	r2, r4
 8004cea:	3302      	adds	r3, #2
 8004cec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cf0:	e7c2      	b.n	8004c78 <_printf_common+0x58>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4622      	mov	r2, r4
 8004cf6:	4641      	mov	r1, r8
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	47c8      	blx	r9
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d0e6      	beq.n	8004cce <_printf_common+0xae>
 8004d00:	3601      	adds	r6, #1
 8004d02:	e7d9      	b.n	8004cb8 <_printf_common+0x98>

08004d04 <_printf_i>:
 8004d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d08:	7e0f      	ldrb	r7, [r1, #24]
 8004d0a:	4691      	mov	r9, r2
 8004d0c:	2f78      	cmp	r7, #120	@ 0x78
 8004d0e:	4680      	mov	r8, r0
 8004d10:	460c      	mov	r4, r1
 8004d12:	469a      	mov	sl, r3
 8004d14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d1a:	d807      	bhi.n	8004d2c <_printf_i+0x28>
 8004d1c:	2f62      	cmp	r7, #98	@ 0x62
 8004d1e:	d80a      	bhi.n	8004d36 <_printf_i+0x32>
 8004d20:	2f00      	cmp	r7, #0
 8004d22:	f000 80d1 	beq.w	8004ec8 <_printf_i+0x1c4>
 8004d26:	2f58      	cmp	r7, #88	@ 0x58
 8004d28:	f000 80b8 	beq.w	8004e9c <_printf_i+0x198>
 8004d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d34:	e03a      	b.n	8004dac <_printf_i+0xa8>
 8004d36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d3a:	2b15      	cmp	r3, #21
 8004d3c:	d8f6      	bhi.n	8004d2c <_printf_i+0x28>
 8004d3e:	a101      	add	r1, pc, #4	@ (adr r1, 8004d44 <_printf_i+0x40>)
 8004d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d44:	08004d9d 	.word	0x08004d9d
 8004d48:	08004db1 	.word	0x08004db1
 8004d4c:	08004d2d 	.word	0x08004d2d
 8004d50:	08004d2d 	.word	0x08004d2d
 8004d54:	08004d2d 	.word	0x08004d2d
 8004d58:	08004d2d 	.word	0x08004d2d
 8004d5c:	08004db1 	.word	0x08004db1
 8004d60:	08004d2d 	.word	0x08004d2d
 8004d64:	08004d2d 	.word	0x08004d2d
 8004d68:	08004d2d 	.word	0x08004d2d
 8004d6c:	08004d2d 	.word	0x08004d2d
 8004d70:	08004eaf 	.word	0x08004eaf
 8004d74:	08004ddb 	.word	0x08004ddb
 8004d78:	08004e69 	.word	0x08004e69
 8004d7c:	08004d2d 	.word	0x08004d2d
 8004d80:	08004d2d 	.word	0x08004d2d
 8004d84:	08004ed1 	.word	0x08004ed1
 8004d88:	08004d2d 	.word	0x08004d2d
 8004d8c:	08004ddb 	.word	0x08004ddb
 8004d90:	08004d2d 	.word	0x08004d2d
 8004d94:	08004d2d 	.word	0x08004d2d
 8004d98:	08004e71 	.word	0x08004e71
 8004d9c:	6833      	ldr	r3, [r6, #0]
 8004d9e:	1d1a      	adds	r2, r3, #4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6032      	str	r2, [r6, #0]
 8004da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004da8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004dac:	2301      	movs	r3, #1
 8004dae:	e09c      	b.n	8004eea <_printf_i+0x1e6>
 8004db0:	6833      	ldr	r3, [r6, #0]
 8004db2:	6820      	ldr	r0, [r4, #0]
 8004db4:	1d19      	adds	r1, r3, #4
 8004db6:	6031      	str	r1, [r6, #0]
 8004db8:	0606      	lsls	r6, r0, #24
 8004dba:	d501      	bpl.n	8004dc0 <_printf_i+0xbc>
 8004dbc:	681d      	ldr	r5, [r3, #0]
 8004dbe:	e003      	b.n	8004dc8 <_printf_i+0xc4>
 8004dc0:	0645      	lsls	r5, r0, #25
 8004dc2:	d5fb      	bpl.n	8004dbc <_printf_i+0xb8>
 8004dc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dc8:	2d00      	cmp	r5, #0
 8004dca:	da03      	bge.n	8004dd4 <_printf_i+0xd0>
 8004dcc:	232d      	movs	r3, #45	@ 0x2d
 8004dce:	426d      	negs	r5, r5
 8004dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dd4:	230a      	movs	r3, #10
 8004dd6:	4858      	ldr	r0, [pc, #352]	@ (8004f38 <_printf_i+0x234>)
 8004dd8:	e011      	b.n	8004dfe <_printf_i+0xfa>
 8004dda:	6821      	ldr	r1, [r4, #0]
 8004ddc:	6833      	ldr	r3, [r6, #0]
 8004dde:	0608      	lsls	r0, r1, #24
 8004de0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004de4:	d402      	bmi.n	8004dec <_printf_i+0xe8>
 8004de6:	0649      	lsls	r1, r1, #25
 8004de8:	bf48      	it	mi
 8004dea:	b2ad      	uxthmi	r5, r5
 8004dec:	2f6f      	cmp	r7, #111	@ 0x6f
 8004dee:	6033      	str	r3, [r6, #0]
 8004df0:	bf14      	ite	ne
 8004df2:	230a      	movne	r3, #10
 8004df4:	2308      	moveq	r3, #8
 8004df6:	4850      	ldr	r0, [pc, #320]	@ (8004f38 <_printf_i+0x234>)
 8004df8:	2100      	movs	r1, #0
 8004dfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004dfe:	6866      	ldr	r6, [r4, #4]
 8004e00:	2e00      	cmp	r6, #0
 8004e02:	60a6      	str	r6, [r4, #8]
 8004e04:	db05      	blt.n	8004e12 <_printf_i+0x10e>
 8004e06:	6821      	ldr	r1, [r4, #0]
 8004e08:	432e      	orrs	r6, r5
 8004e0a:	f021 0104 	bic.w	r1, r1, #4
 8004e0e:	6021      	str	r1, [r4, #0]
 8004e10:	d04b      	beq.n	8004eaa <_printf_i+0x1a6>
 8004e12:	4616      	mov	r6, r2
 8004e14:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e18:	fb03 5711 	mls	r7, r3, r1, r5
 8004e1c:	5dc7      	ldrb	r7, [r0, r7]
 8004e1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e22:	462f      	mov	r7, r5
 8004e24:	42bb      	cmp	r3, r7
 8004e26:	460d      	mov	r5, r1
 8004e28:	d9f4      	bls.n	8004e14 <_printf_i+0x110>
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d10b      	bne.n	8004e46 <_printf_i+0x142>
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	07df      	lsls	r7, r3, #31
 8004e32:	d508      	bpl.n	8004e46 <_printf_i+0x142>
 8004e34:	6923      	ldr	r3, [r4, #16]
 8004e36:	6861      	ldr	r1, [r4, #4]
 8004e38:	4299      	cmp	r1, r3
 8004e3a:	bfde      	ittt	le
 8004e3c:	2330      	movle	r3, #48	@ 0x30
 8004e3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e42:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e46:	1b92      	subs	r2, r2, r6
 8004e48:	6122      	str	r2, [r4, #16]
 8004e4a:	464b      	mov	r3, r9
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	4640      	mov	r0, r8
 8004e50:	f8cd a000 	str.w	sl, [sp]
 8004e54:	aa03      	add	r2, sp, #12
 8004e56:	f7ff fee3 	bl	8004c20 <_printf_common>
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	d14a      	bne.n	8004ef4 <_printf_i+0x1f0>
 8004e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e62:	b004      	add	sp, #16
 8004e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	f043 0320 	orr.w	r3, r3, #32
 8004e6e:	6023      	str	r3, [r4, #0]
 8004e70:	2778      	movs	r7, #120	@ 0x78
 8004e72:	4832      	ldr	r0, [pc, #200]	@ (8004f3c <_printf_i+0x238>)
 8004e74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	6831      	ldr	r1, [r6, #0]
 8004e7c:	061f      	lsls	r7, r3, #24
 8004e7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e82:	d402      	bmi.n	8004e8a <_printf_i+0x186>
 8004e84:	065f      	lsls	r7, r3, #25
 8004e86:	bf48      	it	mi
 8004e88:	b2ad      	uxthmi	r5, r5
 8004e8a:	6031      	str	r1, [r6, #0]
 8004e8c:	07d9      	lsls	r1, r3, #31
 8004e8e:	bf44      	itt	mi
 8004e90:	f043 0320 	orrmi.w	r3, r3, #32
 8004e94:	6023      	strmi	r3, [r4, #0]
 8004e96:	b11d      	cbz	r5, 8004ea0 <_printf_i+0x19c>
 8004e98:	2310      	movs	r3, #16
 8004e9a:	e7ad      	b.n	8004df8 <_printf_i+0xf4>
 8004e9c:	4826      	ldr	r0, [pc, #152]	@ (8004f38 <_printf_i+0x234>)
 8004e9e:	e7e9      	b.n	8004e74 <_printf_i+0x170>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	f023 0320 	bic.w	r3, r3, #32
 8004ea6:	6023      	str	r3, [r4, #0]
 8004ea8:	e7f6      	b.n	8004e98 <_printf_i+0x194>
 8004eaa:	4616      	mov	r6, r2
 8004eac:	e7bd      	b.n	8004e2a <_printf_i+0x126>
 8004eae:	6833      	ldr	r3, [r6, #0]
 8004eb0:	6825      	ldr	r5, [r4, #0]
 8004eb2:	1d18      	adds	r0, r3, #4
 8004eb4:	6961      	ldr	r1, [r4, #20]
 8004eb6:	6030      	str	r0, [r6, #0]
 8004eb8:	062e      	lsls	r6, r5, #24
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	d501      	bpl.n	8004ec2 <_printf_i+0x1be>
 8004ebe:	6019      	str	r1, [r3, #0]
 8004ec0:	e002      	b.n	8004ec8 <_printf_i+0x1c4>
 8004ec2:	0668      	lsls	r0, r5, #25
 8004ec4:	d5fb      	bpl.n	8004ebe <_printf_i+0x1ba>
 8004ec6:	8019      	strh	r1, [r3, #0]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	4616      	mov	r6, r2
 8004ecc:	6123      	str	r3, [r4, #16]
 8004ece:	e7bc      	b.n	8004e4a <_printf_i+0x146>
 8004ed0:	6833      	ldr	r3, [r6, #0]
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	1d1a      	adds	r2, r3, #4
 8004ed6:	6032      	str	r2, [r6, #0]
 8004ed8:	681e      	ldr	r6, [r3, #0]
 8004eda:	6862      	ldr	r2, [r4, #4]
 8004edc:	4630      	mov	r0, r6
 8004ede:	f000 f859 	bl	8004f94 <memchr>
 8004ee2:	b108      	cbz	r0, 8004ee8 <_printf_i+0x1e4>
 8004ee4:	1b80      	subs	r0, r0, r6
 8004ee6:	6060      	str	r0, [r4, #4]
 8004ee8:	6863      	ldr	r3, [r4, #4]
 8004eea:	6123      	str	r3, [r4, #16]
 8004eec:	2300      	movs	r3, #0
 8004eee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ef2:	e7aa      	b.n	8004e4a <_printf_i+0x146>
 8004ef4:	4632      	mov	r2, r6
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	4640      	mov	r0, r8
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	47d0      	blx	sl
 8004efe:	3001      	adds	r0, #1
 8004f00:	d0ad      	beq.n	8004e5e <_printf_i+0x15a>
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	079b      	lsls	r3, r3, #30
 8004f06:	d413      	bmi.n	8004f30 <_printf_i+0x22c>
 8004f08:	68e0      	ldr	r0, [r4, #12]
 8004f0a:	9b03      	ldr	r3, [sp, #12]
 8004f0c:	4298      	cmp	r0, r3
 8004f0e:	bfb8      	it	lt
 8004f10:	4618      	movlt	r0, r3
 8004f12:	e7a6      	b.n	8004e62 <_printf_i+0x15e>
 8004f14:	2301      	movs	r3, #1
 8004f16:	4632      	mov	r2, r6
 8004f18:	4649      	mov	r1, r9
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	47d0      	blx	sl
 8004f1e:	3001      	adds	r0, #1
 8004f20:	d09d      	beq.n	8004e5e <_printf_i+0x15a>
 8004f22:	3501      	adds	r5, #1
 8004f24:	68e3      	ldr	r3, [r4, #12]
 8004f26:	9903      	ldr	r1, [sp, #12]
 8004f28:	1a5b      	subs	r3, r3, r1
 8004f2a:	42ab      	cmp	r3, r5
 8004f2c:	dcf2      	bgt.n	8004f14 <_printf_i+0x210>
 8004f2e:	e7eb      	b.n	8004f08 <_printf_i+0x204>
 8004f30:	2500      	movs	r5, #0
 8004f32:	f104 0619 	add.w	r6, r4, #25
 8004f36:	e7f5      	b.n	8004f24 <_printf_i+0x220>
 8004f38:	080050f3 	.word	0x080050f3
 8004f3c:	08005104 	.word	0x08005104

08004f40 <memmove>:
 8004f40:	4288      	cmp	r0, r1
 8004f42:	b510      	push	{r4, lr}
 8004f44:	eb01 0402 	add.w	r4, r1, r2
 8004f48:	d902      	bls.n	8004f50 <memmove+0x10>
 8004f4a:	4284      	cmp	r4, r0
 8004f4c:	4623      	mov	r3, r4
 8004f4e:	d807      	bhi.n	8004f60 <memmove+0x20>
 8004f50:	1e43      	subs	r3, r0, #1
 8004f52:	42a1      	cmp	r1, r4
 8004f54:	d008      	beq.n	8004f68 <memmove+0x28>
 8004f56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f5e:	e7f8      	b.n	8004f52 <memmove+0x12>
 8004f60:	4601      	mov	r1, r0
 8004f62:	4402      	add	r2, r0
 8004f64:	428a      	cmp	r2, r1
 8004f66:	d100      	bne.n	8004f6a <memmove+0x2a>
 8004f68:	bd10      	pop	{r4, pc}
 8004f6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f72:	e7f7      	b.n	8004f64 <memmove+0x24>

08004f74 <_sbrk_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	2300      	movs	r3, #0
 8004f78:	4d05      	ldr	r5, [pc, #20]	@ (8004f90 <_sbrk_r+0x1c>)
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	4608      	mov	r0, r1
 8004f7e:	602b      	str	r3, [r5, #0]
 8004f80:	f7fc fbf4 	bl	800176c <_sbrk>
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	d102      	bne.n	8004f8e <_sbrk_r+0x1a>
 8004f88:	682b      	ldr	r3, [r5, #0]
 8004f8a:	b103      	cbz	r3, 8004f8e <_sbrk_r+0x1a>
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	bd38      	pop	{r3, r4, r5, pc}
 8004f90:	200002c4 	.word	0x200002c4

08004f94 <memchr>:
 8004f94:	4603      	mov	r3, r0
 8004f96:	b510      	push	{r4, lr}
 8004f98:	b2c9      	uxtb	r1, r1
 8004f9a:	4402      	add	r2, r0
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	d101      	bne.n	8004fa6 <memchr+0x12>
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	e003      	b.n	8004fae <memchr+0x1a>
 8004fa6:	7804      	ldrb	r4, [r0, #0]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	428c      	cmp	r4, r1
 8004fac:	d1f6      	bne.n	8004f9c <memchr+0x8>
 8004fae:	bd10      	pop	{r4, pc}

08004fb0 <memcpy>:
 8004fb0:	440a      	add	r2, r1
 8004fb2:	4291      	cmp	r1, r2
 8004fb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fb8:	d100      	bne.n	8004fbc <memcpy+0xc>
 8004fba:	4770      	bx	lr
 8004fbc:	b510      	push	{r4, lr}
 8004fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fc2:	4291      	cmp	r1, r2
 8004fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fc8:	d1f9      	bne.n	8004fbe <memcpy+0xe>
 8004fca:	bd10      	pop	{r4, pc}

08004fcc <_realloc_r>:
 8004fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd0:	4607      	mov	r7, r0
 8004fd2:	4614      	mov	r4, r2
 8004fd4:	460d      	mov	r5, r1
 8004fd6:	b921      	cbnz	r1, 8004fe2 <_realloc_r+0x16>
 8004fd8:	4611      	mov	r1, r2
 8004fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fde:	f7ff bc3b 	b.w	8004858 <_malloc_r>
 8004fe2:	b92a      	cbnz	r2, 8004ff0 <_realloc_r+0x24>
 8004fe4:	f7ff fbce 	bl	8004784 <_free_r>
 8004fe8:	4625      	mov	r5, r4
 8004fea:	4628      	mov	r0, r5
 8004fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff0:	f000 f81a 	bl	8005028 <_malloc_usable_size_r>
 8004ff4:	4284      	cmp	r4, r0
 8004ff6:	4606      	mov	r6, r0
 8004ff8:	d802      	bhi.n	8005000 <_realloc_r+0x34>
 8004ffa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ffe:	d8f4      	bhi.n	8004fea <_realloc_r+0x1e>
 8005000:	4621      	mov	r1, r4
 8005002:	4638      	mov	r0, r7
 8005004:	f7ff fc28 	bl	8004858 <_malloc_r>
 8005008:	4680      	mov	r8, r0
 800500a:	b908      	cbnz	r0, 8005010 <_realloc_r+0x44>
 800500c:	4645      	mov	r5, r8
 800500e:	e7ec      	b.n	8004fea <_realloc_r+0x1e>
 8005010:	42b4      	cmp	r4, r6
 8005012:	4622      	mov	r2, r4
 8005014:	4629      	mov	r1, r5
 8005016:	bf28      	it	cs
 8005018:	4632      	movcs	r2, r6
 800501a:	f7ff ffc9 	bl	8004fb0 <memcpy>
 800501e:	4629      	mov	r1, r5
 8005020:	4638      	mov	r0, r7
 8005022:	f7ff fbaf 	bl	8004784 <_free_r>
 8005026:	e7f1      	b.n	800500c <_realloc_r+0x40>

08005028 <_malloc_usable_size_r>:
 8005028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800502c:	1f18      	subs	r0, r3, #4
 800502e:	2b00      	cmp	r3, #0
 8005030:	bfbc      	itt	lt
 8005032:	580b      	ldrlt	r3, [r1, r0]
 8005034:	18c0      	addlt	r0, r0, r3
 8005036:	4770      	bx	lr

08005038 <_init>:
 8005038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503a:	bf00      	nop
 800503c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503e:	bc08      	pop	{r3}
 8005040:	469e      	mov	lr, r3
 8005042:	4770      	bx	lr

08005044 <_fini>:
 8005044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005046:	bf00      	nop
 8005048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504a:	bc08      	pop	{r3}
 800504c:	469e      	mov	lr, r3
 800504e:	4770      	bx	lr
